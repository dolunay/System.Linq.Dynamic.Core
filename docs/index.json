{
  "api/System.html": {
    "href": "api/System.html",
    "title": "Namespace System",
    "keywords": "Namespace System Classes Tuple<T1, T2> Represents a 2-tuple, or pair."
  },
  "api/System.Linq.Dynamic.Core.Config.html": {
    "href": "api/System.Linq.Dynamic.Core.Config.html",
    "title": "Namespace System.Linq.Dynamic.Core.Config",
    "keywords": "Namespace System.Linq.Dynamic.Core.Config Enums StringLiteralParsingType Defines the types of string literal parsing that can be performed."
  },
  "api/System.Linq.Dynamic.Core.Config.StringLiteralParsingType.html": {
    "href": "api/System.Linq.Dynamic.Core.Config.StringLiteralParsingType.html",
    "title": "Enum StringLiteralParsingType",
    "keywords": "Enum StringLiteralParsingType Defines the types of string literal parsing that can be performed. Namespace : System.Linq.Dynamic.Core.Config Assembly : System.Linq.Dynamic.Core.dll Syntax public enum StringLiteralParsingType : byte Fields Name Description Default Represents the default string literal parsing type. Double quotes should be escaped using the default escape character (a ). To check if a Value equals a double quote, use this c# code: var expression = \"Value == \\\"\\\\\\\"\\\"\"; EscapeDoubleQuoteByTwoDoubleQuotes Represents a string literal parsing type where a double quote should be escaped by an extra double quote (\"). To check if a Value equals a double quote, use this c# code: var expression = \"Value == \\\"\\\"\\\"\\\"\";"
  },
  "api/System.Linq.Dynamic.Core.CustomTypeProviders.AbstractDynamicLinqCustomTypeProvider.html": {
    "href": "api/System.Linq.Dynamic.Core.CustomTypeProviders.AbstractDynamicLinqCustomTypeProvider.html",
    "title": "Class AbstractDynamicLinqCustomTypeProvider",
    "keywords": "Class AbstractDynamicLinqCustomTypeProvider The abstract DynamicLinqCustomTypeProvider which is used by the DefaultDynamicLinqCustomTypeProvider and can be used by a custom TypeProvider like in .NET Core. Inheritance System.Object AbstractDynamicLinqCustomTypeProvider DefaultDynamicLinqCustomTypeProvider Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : System.Linq.Dynamic.Core.CustomTypeProviders Assembly : System.Linq.Dynamic.Core.dll Syntax public abstract class AbstractDynamicLinqCustomTypeProvider Methods | Improve this Doc View Source FindTypesMarkedWithDynamicLinqTypeAttribute(IEnumerable<Assembly>) Finds the unique types marked with DynamicLinqTypeAttribute. Declaration protected IEnumerable<Type> FindTypesMarkedWithDynamicLinqTypeAttribute(IEnumerable<Assembly> assemblies) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Reflection.Assembly > assemblies The assemblies to process. Returns Type Description System.Collections.Generic.IEnumerable < System.Type > System.Collections.Generic.IEnumerable<T> | Improve this Doc View Source GetAssemblyTypesWithDynamicLinqTypeAttribute(IEnumerable<Assembly>) Gets the assembly types annotated with DynamicLinqTypeAttribute in an Exception friendly way. Declaration protected Type[] GetAssemblyTypesWithDynamicLinqTypeAttribute(IEnumerable<Assembly> assemblies) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Reflection.Assembly > assemblies The assemblies to process. Returns Type Description System.Type [] Array of System.Type | Improve this Doc View Source ResolveType(IEnumerable<Assembly>, String) Resolve any type which is registered in the current application domain. Declaration protected Type ResolveType(IEnumerable<Assembly> assemblies, string typeName) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Reflection.Assembly > assemblies The assemblies to inspect. System.String typeName The typename to resolve. Returns Type Description System.Type A resolved System.Type or null when not found. | Improve this Doc View Source ResolveTypeBySimpleName(IEnumerable<Assembly>, String) Resolve a type by the simple name which is registered in the current application domain. Declaration protected Type ResolveTypeBySimpleName(IEnumerable<Assembly> assemblies, string simpleTypeName) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Reflection.Assembly > assemblies The assemblies to inspect. System.String simpleTypeName The simple typename to resolve. Returns Type Description System.Type A resolved System.Type or null when not found."
  },
  "api/System.Linq.Dynamic.Core.CustomTypeProviders.DefaultDynamicLinqCustomTypeProvider.html": {
    "href": "api/System.Linq.Dynamic.Core.CustomTypeProviders.DefaultDynamicLinqCustomTypeProvider.html",
    "title": "Class DefaultDynamicLinqCustomTypeProvider",
    "keywords": "Class DefaultDynamicLinqCustomTypeProvider The default implementation for DefaultDynamicLinqCustomTypeProvider . Scans the current AppDomain for all types marked with DynamicLinqTypeAttribute , and adds them as custom Dynamic Link types. Also provides functionality to resolve a Type in the current Application Domain. This class is used as default for full .NET Framework and .NET Core App 2.x and higher. Inheritance System.Object AbstractDynamicLinqCustomTypeProvider DefaultDynamicLinqCustomTypeProvider Implements IDynamicLinkCustomTypeProvider IDynamicLinqCustomTypeProvider Inherited Members AbstractDynamicLinqCustomTypeProvider.FindTypesMarkedWithDynamicLinqTypeAttribute(IEnumerable<Assembly>) AbstractDynamicLinqCustomTypeProvider.ResolveType(IEnumerable<Assembly>, String) AbstractDynamicLinqCustomTypeProvider.ResolveTypeBySimpleName(IEnumerable<Assembly>, String) AbstractDynamicLinqCustomTypeProvider.GetAssemblyTypesWithDynamicLinqTypeAttribute(IEnumerable<Assembly>) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : System.Linq.Dynamic.Core.CustomTypeProviders Assembly : System.Linq.Dynamic.Core.dll Syntax public class DefaultDynamicLinqCustomTypeProvider : AbstractDynamicLinqCustomTypeProvider, IDynamicLinkCustomTypeProvider, IDynamicLinqCustomTypeProvider Constructors | Improve this Doc View Source DefaultDynamicLinqCustomTypeProvider(Boolean) Initializes a new instance of the DefaultDynamicLinqCustomTypeProvider class. Backwards compatibility for issue https://github.com/zzzprojects/System.Linq.Dynamic.Core/issues/830 . Declaration [Obsolete(\"Please use the DefaultDynamicLinqCustomTypeProvider(ParsingConfig config, bool cacheCustomTypes = true) constructor.\")] public DefaultDynamicLinqCustomTypeProvider(bool cacheCustomTypes = true) Parameters Type Name Description System.Boolean cacheCustomTypes Defines whether to cache the CustomTypes (including extension methods) which are found in the Application Domain. Default set to 'true'. | Improve this Doc View Source DefaultDynamicLinqCustomTypeProvider(ParsingConfig, Boolean) Initializes a new instance of the DefaultDynamicLinqCustomTypeProvider class. Declaration public DefaultDynamicLinqCustomTypeProvider(ParsingConfig config, bool cacheCustomTypes = true) Parameters Type Name Description ParsingConfig config The parsing configuration. System.Boolean cacheCustomTypes Defines whether to cache the CustomTypes (including extension methods) which are found in the Application Domain. Default set to 'true'. Methods | Improve this Doc View Source GetCustomTypes() Returns a list of custom types that System.Linq.Dynamic.Core will understand. Declaration public virtual HashSet<Type> GetCustomTypes() Returns Type Description System.Collections.Generic.HashSet < System.Type > A System.Collections.Generic.HashSet<T> list of custom types. | Improve this Doc View Source GetExtensionMethods() Returns a list of custom extension methods that System.Linq.Dynamic.Core will understand. Declaration public Dictionary<Type, List<MethodInfo>> GetExtensionMethods() Returns Type Description System.Collections.Generic.Dictionary < System.Type , System.Collections.Generic.List < System.Reflection.MethodInfo >> A list of custom extension methods that System.Linq.Dynamic.Core will understand. | Improve this Doc View Source ResolveType(String) Resolve any type by fullname which is registered in the current application domain. Declaration public Type ResolveType(string typeName) Parameters Type Name Description System.String typeName The typename to resolve. Returns Type Description System.Type A resolved System.Type or null when not found. | Improve this Doc View Source ResolveTypeBySimpleName(String) Resolve any type by the simple name which is registered in the current application domain. Declaration public Type ResolveTypeBySimpleName(string simpleTypeName) Parameters Type Name Description System.String simpleTypeName The typename to resolve. Returns Type Description System.Type A resolved System.Type or null when not found. Implements IDynamicLinkCustomTypeProvider IDynamicLinqCustomTypeProvider"
  },
  "api/System.Linq.Dynamic.Core.CustomTypeProviders.DynamicLinqTypeAttribute.html": {
    "href": "api/System.Linq.Dynamic.Core.CustomTypeProviders.DynamicLinqTypeAttribute.html",
    "title": "Class DynamicLinqTypeAttribute",
    "keywords": "Class DynamicLinqTypeAttribute Indicates to Dynamic Linq to consider the Type as a valid dynamic linq type. Inheritance System.Object System.Attribute DynamicLinqTypeAttribute Implements System.Runtime.InteropServices._Attribute Inherited Members System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : System.Linq.Dynamic.Core.CustomTypeProviders Assembly : System.Linq.Dynamic.Core.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Interface, AllowMultiple = false, Inherited = false)] public sealed class DynamicLinqTypeAttribute : Attribute, _Attribute Implements System.Runtime.InteropServices._Attribute"
  },
  "api/System.Linq.Dynamic.Core.CustomTypeProviders.html": {
    "href": "api/System.Linq.Dynamic.Core.CustomTypeProviders.html",
    "title": "Namespace System.Linq.Dynamic.Core.CustomTypeProviders",
    "keywords": "Namespace System.Linq.Dynamic.Core.CustomTypeProviders Classes AbstractDynamicLinqCustomTypeProvider The abstract DynamicLinqCustomTypeProvider which is used by the DefaultDynamicLinqCustomTypeProvider and can be used by a custom TypeProvider like in .NET Core. DefaultDynamicLinqCustomTypeProvider The default implementation for DefaultDynamicLinqCustomTypeProvider . Scans the current AppDomain for all types marked with DynamicLinqTypeAttribute , and adds them as custom Dynamic Link types. Also provides functionality to resolve a Type in the current Application Domain. This class is used as default for full .NET Framework and .NET Core App 2.x and higher. DynamicLinqTypeAttribute Indicates to Dynamic Linq to consider the Type as a valid dynamic linq type. Interfaces IDynamicLinkCustomTypeProvider Interface for providing functionality to find custom types for or resolve any type. Note that this interface will be marked obsolete in the next version. Use IDynamicLinqCustomTypeProvider instead. IDynamicLinqCustomTypeProvider Interface for providing functionality to find custom types for or resolve any type."
  },
  "api/System.Linq.Dynamic.Core.CustomTypeProviders.IDynamicLinkCustomTypeProvider.html": {
    "href": "api/System.Linq.Dynamic.Core.CustomTypeProviders.IDynamicLinkCustomTypeProvider.html",
    "title": "Interface IDynamicLinkCustomTypeProvider",
    "keywords": "Interface IDynamicLinkCustomTypeProvider Interface for providing functionality to find custom types for or resolve any type. Note that this interface will be marked obsolete in the next version. Use IDynamicLinqCustomTypeProvider instead. Inherited Members IDynamicLinqCustomTypeProvider.GetCustomTypes() IDynamicLinqCustomTypeProvider.GetExtensionMethods() IDynamicLinqCustomTypeProvider.ResolveType(String) IDynamicLinqCustomTypeProvider.ResolveTypeBySimpleName(String) Namespace : System.Linq.Dynamic.Core.CustomTypeProviders Assembly : System.Linq.Dynamic.Core.dll Syntax public interface IDynamicLinkCustomTypeProvider : IDynamicLinqCustomTypeProvider"
  },
  "api/System.Linq.Dynamic.Core.CustomTypeProviders.IDynamicLinqCustomTypeProvider.html": {
    "href": "api/System.Linq.Dynamic.Core.CustomTypeProviders.IDynamicLinqCustomTypeProvider.html",
    "title": "Interface IDynamicLinqCustomTypeProvider",
    "keywords": "Interface IDynamicLinqCustomTypeProvider Interface for providing functionality to find custom types for or resolve any type. Namespace : System.Linq.Dynamic.Core.CustomTypeProviders Assembly : System.Linq.Dynamic.Core.dll Syntax public interface IDynamicLinqCustomTypeProvider Methods | Improve this Doc View Source GetCustomTypes() Returns a list of custom types that System.Linq.Dynamic.Core will understand. Declaration HashSet<Type> GetCustomTypes() Returns Type Description System.Collections.Generic.HashSet < System.Type > A System.Collections.Generic.HashSet<T> list of custom types. | Improve this Doc View Source GetExtensionMethods() Returns a list of custom extension methods that System.Linq.Dynamic.Core will understand. Declaration Dictionary<Type, List<MethodInfo>> GetExtensionMethods() Returns Type Description System.Collections.Generic.Dictionary < System.Type , System.Collections.Generic.List < System.Reflection.MethodInfo >> A list of custom extension methods that System.Linq.Dynamic.Core will understand. | Improve this Doc View Source ResolveType(String) Resolve any type by fullname which is registered in the current application domain. Declaration Type ResolveType(string typeName) Parameters Type Name Description System.String typeName The typename to resolve. Returns Type Description System.Type A resolved System.Type or null when not found. | Improve this Doc View Source ResolveTypeBySimpleName(String) Resolve any type by the simple name which is registered in the current application domain. Declaration Type ResolveTypeBySimpleName(string simpleTypeName) Parameters Type Name Description System.String simpleTypeName The typename to resolve. Returns Type Description System.Type A resolved System.Type or null when not found."
  },
  "api/System.Linq.Dynamic.Core.DefaultQueryableAnalyzer.html": {
    "href": "api/System.Linq.Dynamic.Core.DefaultQueryableAnalyzer.html",
    "title": "Class DefaultQueryableAnalyzer",
    "keywords": "Class DefaultQueryableAnalyzer Default implementation. Inheritance System.Object DefaultQueryableAnalyzer Implements IQueryableAnalyzer Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : System.Linq.Dynamic.Core Assembly : System.Linq.Dynamic.Core.dll Syntax public class DefaultQueryableAnalyzer : IQueryableAnalyzer Methods | Improve this Doc View Source SupportsLinqToObjects(IQueryable, IQueryProvider) Determines whether the specified query (and provider) supports LinqToObjects. Declaration public bool SupportsLinqToObjects(IQueryable query, IQueryProvider provider = null) Parameters Type Name Description System.Linq.IQueryable query The query to check. System.Linq.IQueryProvider provider The provider to check (can be null). Returns Type Description System.Boolean true/false Implements IQueryableAnalyzer See Also IQueryableAnalyzer"
  },
  "api/System.Linq.Dynamic.Core.DynamicClass.html": {
    "href": "api/System.Linq.Dynamic.Core.DynamicClass.html",
    "title": "Class DynamicClass",
    "keywords": "Class DynamicClass Provides a base class for dynamic objects for Net 3.5 Inheritance System.Object DynamicClass Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : System.Linq.Dynamic.Core Assembly : System.Linq.Dynamic.Core.dll Syntax public abstract class DynamicClass Methods | Improve this Doc View Source GetDynamicPropertyValue(String) Gets the dynamic property value by name. Declaration public object GetDynamicPropertyValue(string propertyName) Parameters Type Name Description System.String propertyName Name of the property. Returns Type Description System.Object value | Improve this Doc View Source GetDynamicPropertyValue<T>(String) Gets the dynamic property by name. Declaration public T GetDynamicPropertyValue<T>(string propertyName) Parameters Type Name Description System.String propertyName Name of the property. Returns Type Description T T Type Parameters Name Description T The type. | Improve this Doc View Source SetDynamicPropertyValue(String, Object) Sets the dynamic property value by name. Declaration public void SetDynamicPropertyValue(string propertyName, object value) Parameters Type Name Description System.String propertyName Name of the property. System.Object value The value. | Improve this Doc View Source SetDynamicPropertyValue<T>(String, T) Sets the dynamic property value by name. Declaration public void SetDynamicPropertyValue<T>(string propertyName, T value) Parameters Type Name Description System.String propertyName Name of the property. T value The value. Type Parameters Name Description T The type."
  },
  "api/System.Linq.Dynamic.Core.DynamicClassFactory.html": {
    "href": "api/System.Linq.Dynamic.Core.DynamicClassFactory.html",
    "title": "Class DynamicClassFactory",
    "keywords": "Class DynamicClassFactory A factory to create dynamic classes, based on http://stackoverflow.com/questions/29413942/c-sharp-anonymous-object-with-properties-from-dictionary . Inheritance System.Object DynamicClassFactory Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : System.Linq.Dynamic.Core Assembly : System.Linq.Dynamic.Core.dll Syntax public static class DynamicClassFactory Methods | Improve this Doc View Source CreateGenericComparerType(Type, Type) Create a GenericComparerType based on the GenericType and an instance of a System.Collections.IComparer . Declaration public static Type CreateGenericComparerType(Type comparerGenericType, Type comparerType) Parameters Type Name Description System.Type comparerGenericType The GenericType System.Type comparerType The System.Collections.IComparer instance Returns Type Description System.Type Type | Improve this Doc View Source CreateType(IList<DynamicProperty>, Boolean) The CreateType method creates a new data class with a given set of public properties and returns the System.Type object for the newly created class. If a data class with an identical sequence of properties has already been created, the System.Type object for this class is returned. Data classes implement private instance variables and read/write property accessors for the specified properties.Data classes also override the Equals and GetHashCode members to implement by-value equality. Data classes are created in an in-memory assembly in the current application domain. All data classes inherit from DynamicClass and are given automatically generated names that should be considered private (the names will be unique within the application domain but not across multiple invocations of the application). Note that once created, a data class stays in memory for the lifetime of the current application domain. There is currently no way to unload a dynamically created data class. The dynamic expression parser uses the CreateClass methods to generate classes from data object initializers. This feature in turn is often used with the dynamic Select method to create projections. Declaration public static Type CreateType(IList<DynamicProperty> properties, bool createParameterCtor = true) Parameters Type Name Description System.Collections.Generic.IList < DynamicProperty > properties The DynamicProperties System.Boolean createParameterCtor Create a constructor with parameters. Default set to true. Note that for Linq-to-Database objects, this needs to be set to false. Returns Type Description System.Type Type Examples DynamicProperty[] props = new DynamicProperty[] { new DynamicProperty(\"Name\", typeof(string)), new DynamicProperty(\"Birthday\", typeof(DateTime)) }; Type type = DynamicClassFactory.CreateType(props); DynamicClass dynamicClass = (DynamicClass) Activator.CreateInstance(type)!; dynamicClass.SetDynamicPropertyValue(\"Name\", \"Albert\"); dynamicClass.SetDynamicPropertyValue(\"Birthday\", new DateTime(1879, 3, 14));"
  },
  "api/System.Linq.Dynamic.Core.DynamicEnumerableExtensions.html": {
    "href": "api/System.Linq.Dynamic.Core.DynamicEnumerableExtensions.html",
    "title": "Class DynamicEnumerableExtensions",
    "keywords": "Class DynamicEnumerableExtensions Define extensions on System.Collections.IEnumerable . Inheritance System.Object DynamicEnumerableExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : System.Linq.Dynamic.Core Assembly : System.Linq.Dynamic.Core.dll Syntax public static class DynamicEnumerableExtensions Methods | Improve this Doc View Source ToDynamicArray(IEnumerable) Creates an array of dynamic objects from a System.Collections.IEnumerable . Declaration public static object[] ToDynamicArray(this IEnumerable source) Parameters Type Name Description System.Collections.IEnumerable source A System.Collections.IEnumerable to create an array from. Returns Type Description System.Object [] An array that contains the elements from the input sequence. | Improve this Doc View Source ToDynamicArray(IEnumerable, Type) Creates an array of dynamic objects from a System.Collections.IEnumerable . Declaration public static object[] ToDynamicArray(this IEnumerable source, Type type) Parameters Type Name Description System.Collections.IEnumerable source A System.Collections.IEnumerable to create an array from. System.Type type A System.Type cast to. Returns Type Description System.Object [] An Array that contains the elements from the input sequence. | Improve this Doc View Source ToDynamicArray<T>(IEnumerable) Creates an array of dynamic objects from a System.Collections.IEnumerable . Declaration public static T[] ToDynamicArray<T>(this IEnumerable source) Parameters Type Name Description System.Collections.IEnumerable source A System.Collections.IEnumerable to create an array from. Returns Type Description T[] An Array{T} that contains the elements from the input sequence. Type Parameters Name Description T The generic type. | Improve this Doc View Source ToDynamicList(IEnumerable) Creates a list of dynamic objects from a System.Collections.IEnumerable . Declaration public static List<object> ToDynamicList(this IEnumerable source) Parameters Type Name Description System.Collections.IEnumerable source A System.Collections.IEnumerable to create an array from. Returns Type Description System.Collections.Generic.List < System.Object > A List that contains the elements from the input sequence. | Improve this Doc View Source ToDynamicList(IEnumerable, Type) Creates a list of dynamic objects from a System.Collections.IEnumerable . Declaration public static List<object> ToDynamicList(this IEnumerable source, Type type) Parameters Type Name Description System.Collections.IEnumerable source A System.Collections.IEnumerable to create an array from. System.Type type A System.Type cast to. Returns Type Description System.Collections.Generic.List < System.Object > A List that contains the elements from the input sequence. | Improve this Doc View Source ToDynamicList<T>(IEnumerable) Creates a list of dynamic objects from a System.Collections.IEnumerable . Declaration public static List<T> ToDynamicList<T>(this IEnumerable source) Parameters Type Name Description System.Collections.IEnumerable source A System.Collections.IEnumerable to create an array from. Returns Type Description System.Collections.Generic.List <T> A List{T} that contains the elements from the input sequence. Type Parameters Name Description T Generic Type"
  },
  "api/System.Linq.Dynamic.Core.DynamicExpressionParser.html": {
    "href": "api/System.Linq.Dynamic.Core.DynamicExpressionParser.html",
    "title": "Class DynamicExpressionParser",
    "keywords": "Class DynamicExpressionParser Helper class to convert an expression into an LambdaExpression Inheritance System.Object DynamicExpressionParser Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : System.Linq.Dynamic.Core Assembly : System.Linq.Dynamic.Core.dll Syntax public static class DynamicExpressionParser Methods | Improve this Doc View Source ParseLambda(Boolean, ParameterExpression[], Type, String, Object[]) Parses an expression into a LambdaExpression. Declaration [PublicAPI] public static LambdaExpression ParseLambda(bool createParameterCtor, ParameterExpression[] parameters, Type resultType, string expression, params object[] values) Parameters Type Name Description System.Boolean createParameterCtor if set to true then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities. System.Linq.Expressions.ParameterExpression [] parameters A array from ParameterExpressions. System.Type resultType Type of the result. If not specified, it will be generated dynamically. System.String expression The expression. System.Object [] values An object array that contains zero or more objects which are used as replacement values. Returns Type Description System.Linq.Expressions.LambdaExpression The generated System.Linq.Expressions.LambdaExpression | Improve this Doc View Source ParseLambda(Boolean, Type, Type, String, Object[]) Parses an expression into a LambdaExpression. Declaration [PublicAPI] public static LambdaExpression ParseLambda(bool createParameterCtor, Type itType, Type resultType, string expression, params object[] values) Parameters Type Name Description System.Boolean createParameterCtor if set to true then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities. System.Type itType The main type from the dynamic class expression. System.Type resultType Type of the result. If not specified, it will be generated dynamically. System.String expression The expression. System.Object [] values An object array that contains zero or more objects which are used as replacement values. Returns Type Description System.Linq.Expressions.LambdaExpression The generated System.Linq.Expressions.LambdaExpression | Improve this Doc View Source ParseLambda(ParsingConfig, Boolean, ParameterExpression[], Type, String, Object[]) Parses an expression into a LambdaExpression. Declaration [PublicAPI] public static LambdaExpression ParseLambda(ParsingConfig parsingConfig, bool createParameterCtor, ParameterExpression[] parameters, Type resultType, string expression, params object[] values) Parameters Type Name Description ParsingConfig parsingConfig The Configuration for the parsing. System.Boolean createParameterCtor if set to true then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities. System.Linq.Expressions.ParameterExpression [] parameters A array from ParameterExpressions. System.Type resultType Type of the result. If not specified, it will be generated dynamically. System.String expression The expression. System.Object [] values An object array that contains zero or more objects which are used as replacement values. Returns Type Description System.Linq.Expressions.LambdaExpression The generated System.Linq.Expressions.LambdaExpression | Improve this Doc View Source ParseLambda(ParsingConfig, Boolean, Type, String, Object[]) Parses an expression into a LambdaExpression. Declaration [PublicAPI] public static LambdaExpression ParseLambda(ParsingConfig parsingConfig, bool createParameterCtor, Type resultType, string expression, params object[] values) Parameters Type Name Description ParsingConfig parsingConfig The Configuration for the parsing. System.Boolean createParameterCtor if set to true then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities. System.Type resultType Type of the result. If not specified, it will be generated dynamically. System.String expression The expression. System.Object [] values An object array that contains zero or more objects which are used as replacement values. Returns Type Description System.Linq.Expressions.LambdaExpression The generated System.Linq.Expressions.LambdaExpression | Improve this Doc View Source ParseLambda(ParsingConfig, Boolean, Type, Type, String, Object[]) Parses an expression into a LambdaExpression. Declaration [PublicAPI] public static LambdaExpression ParseLambda(ParsingConfig parsingConfig, bool createParameterCtor, Type itType, Type resultType, string expression, params object[] values) Parameters Type Name Description ParsingConfig parsingConfig The Configuration for the parsing. System.Boolean createParameterCtor if set to true then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities. System.Type itType The main type from the dynamic class expression. System.Type resultType Type of the result. If not specified, it will be generated dynamically. System.String expression The expression. System.Object [] values An object array that contains zero or more objects which are used as replacement values. Returns Type Description System.Linq.Expressions.LambdaExpression The generated System.Linq.Expressions.LambdaExpression | Improve this Doc View Source ParseLambda(ParsingConfig, ParameterExpression[], Type, String, Object[]) Parses an expression into a LambdaExpression. (Also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.) Declaration [PublicAPI] public static LambdaExpression ParseLambda(ParsingConfig parsingConfig, ParameterExpression[] parameters, Type resultType, string expression, params object[] values) Parameters Type Name Description ParsingConfig parsingConfig The Configuration for the parsing. System.Linq.Expressions.ParameterExpression [] parameters A array from ParameterExpressions. System.Type resultType Type of the result. If not specified, it will be generated dynamically. System.String expression The expression. System.Object [] values An object array that contains zero or more objects which are used as replacement values. Returns Type Description System.Linq.Expressions.LambdaExpression The generated System.Linq.Expressions.LambdaExpression | Improve this Doc View Source ParseLambda(ParsingConfig, Type, String, Object[]) Parses an expression into a LambdaExpression. (Also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.) Declaration [PublicAPI] public static LambdaExpression ParseLambda(ParsingConfig parsingConfig, Type resultType, string expression, params object[] values) Parameters Type Name Description ParsingConfig parsingConfig The Configuration for the parsing. System.Type resultType Type of the result. If not specified, it will be generated dynamically. System.String expression The expression. System.Object [] values An object array that contains zero or more objects which are used as replacement values. Returns Type Description System.Linq.Expressions.LambdaExpression The generated System.Linq.Expressions.LambdaExpression | Improve this Doc View Source ParseLambda(ParsingConfig, Type, Type, String, Object[]) Parses an expression into a LambdaExpression. (Also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.) Declaration [PublicAPI] public static LambdaExpression ParseLambda(ParsingConfig parsingConfig, Type itType, Type resultType, string expression, params object[] values) Parameters Type Name Description ParsingConfig parsingConfig The Configuration for the parsing. System.Type itType The main type from the dynamic class expression. System.Type resultType Type of the result. If not specified, it will be generated dynamically. System.String expression The expression. System.Object [] values An object array that contains zero or more objects which are used as replacement values. Returns Type Description System.Linq.Expressions.LambdaExpression The generated System.Linq.Expressions.LambdaExpression | Improve this Doc View Source ParseLambda(ParameterExpression[], Type, String, Object[]) Parses an expression into a LambdaExpression. (Also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.) Declaration [PublicAPI] public static LambdaExpression ParseLambda(ParameterExpression[] parameters, Type resultType, string expression, params object[] values) Parameters Type Name Description System.Linq.Expressions.ParameterExpression [] parameters A array from ParameterExpressions. System.Type resultType Type of the result. If not specified, it will be generated dynamically. System.String expression The expression. System.Object [] values An object array that contains zero or more objects which are used as replacement values. Returns Type Description System.Linq.Expressions.LambdaExpression The generated System.Linq.Expressions.LambdaExpression | Improve this Doc View Source ParseLambda(Type, ParsingConfig, Boolean, ParameterExpression[], Type, String, Object[]) Parses an expression into a LambdaExpression. Declaration [PublicAPI] public static LambdaExpression ParseLambda(Type delegateType, ParsingConfig parsingConfig, bool createParameterCtor, ParameterExpression[] parameters, Type resultType, string expression, params object[] values) Parameters Type Name Description System.Type delegateType The delegate type. ParsingConfig parsingConfig The Configuration for the parsing. System.Boolean createParameterCtor if set to true then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities. System.Linq.Expressions.ParameterExpression [] parameters A array from ParameterExpressions. System.Type resultType Type of the result. If not specified, it will be generated dynamically. System.String expression The expression. System.Object [] values An object array that contains zero or more objects which are used as replacement values. Returns Type Description System.Linq.Expressions.LambdaExpression The generated System.Linq.Expressions.LambdaExpression | Improve this Doc View Source ParseLambda(Type, ParsingConfig, Boolean, Type, String, Object[]) Parses an expression into a LambdaExpression. Declaration [PublicAPI] public static LambdaExpression ParseLambda(Type delegateType, ParsingConfig parsingConfig, bool createParameterCtor, Type resultType, string expression, params object[] values) Parameters Type Name Description System.Type delegateType The delegate type. ParsingConfig parsingConfig The Configuration for the parsing. System.Boolean createParameterCtor if set to true then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities. System.Type resultType Type of the result. If not specified, it will be generated dynamically. System.String expression The expression. System.Object [] values An object array that contains zero or more objects which are used as replacement values. Returns Type Description System.Linq.Expressions.LambdaExpression The generated System.Linq.Expressions.LambdaExpression | Improve this Doc View Source ParseLambda(Type, ParsingConfig, Boolean, Type, Type, String, Object[]) Parses an expression into a LambdaExpression. Declaration [PublicAPI] public static LambdaExpression ParseLambda(Type delegateType, ParsingConfig parsingConfig, bool createParameterCtor, Type itType, Type resultType, string expression, params object[] values) Parameters Type Name Description System.Type delegateType The delegate type. ParsingConfig parsingConfig The Configuration for the parsing. System.Boolean createParameterCtor if set to true then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities. System.Type itType The main type from the dynamic class expression. System.Type resultType Type of the result. If not specified, it will be generated dynamically. System.String expression The expression. System.Object [] values An object array that contains zero or more objects which are used as replacement values. Returns Type Description System.Linq.Expressions.LambdaExpression The generated System.Linq.Expressions.LambdaExpression | Improve this Doc View Source ParseLambda(Type, ParsingConfig, ParameterExpression[], Type, String, Object[]) Parses an expression into a LambdaExpression. (Also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.) Declaration [PublicAPI] public static LambdaExpression ParseLambda(Type delegateType, ParsingConfig parsingConfig, ParameterExpression[] parameters, Type resultType, string expression, params object[] values) Parameters Type Name Description System.Type delegateType The delegate type. ParsingConfig parsingConfig The Configuration for the parsing. System.Linq.Expressions.ParameterExpression [] parameters A array from ParameterExpressions. System.Type resultType Type of the result. If not specified, it will be generated dynamically. System.String expression The expression. System.Object [] values An object array that contains zero or more objects which are used as replacement values. Returns Type Description System.Linq.Expressions.LambdaExpression The generated System.Linq.Expressions.LambdaExpression | Improve this Doc View Source ParseLambda(Type, ParsingConfig, Type, String, Object[]) Parses an expression into a LambdaExpression. (Also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.) Declaration [PublicAPI] public static LambdaExpression ParseLambda(Type delegateType, ParsingConfig parsingConfig, Type resultType, string expression, params object[] values) Parameters Type Name Description System.Type delegateType The delegate type. ParsingConfig parsingConfig The Configuration for the parsing. System.Type resultType Type of the result. If not specified, it will be generated dynamically. System.String expression The expression. System.Object [] values An object array that contains zero or more objects which are used as replacement values. Returns Type Description System.Linq.Expressions.LambdaExpression The generated System.Linq.Expressions.LambdaExpression | Improve this Doc View Source ParseLambda(Type, ParsingConfig, Type, Type, String, Object[]) Parses an expression into a LambdaExpression. (Also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.) Declaration [PublicAPI] public static LambdaExpression ParseLambda(Type delegateType, ParsingConfig parsingConfig, Type itType, Type resultType, string expression, params object[] values) Parameters Type Name Description System.Type delegateType The delegate type. ParsingConfig parsingConfig The Configuration for the parsing. System.Type itType The main type from the dynamic class expression. System.Type resultType Type of the result. If not specified, it will be generated dynamically. System.String expression The expression. System.Object [] values An object array that contains zero or more objects which are used as replacement values. Returns Type Description System.Linq.Expressions.LambdaExpression The generated System.Linq.Expressions.LambdaExpression | Improve this Doc View Source ParseLambda(Type, ParameterExpression[], Type, String, Object[]) Parses an expression into a LambdaExpression. (Also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.) Declaration [PublicAPI] public static LambdaExpression ParseLambda(Type delegateType, ParameterExpression[] parameters, Type resultType, string expression, params object[] values) Parameters Type Name Description System.Type delegateType The delegate type. System.Linq.Expressions.ParameterExpression [] parameters A array from ParameterExpressions. System.Type resultType Type of the result. If not specified, it will be generated dynamically. System.String expression The expression. System.Object [] values An object array that contains zero or more objects which are used as replacement values. Returns Type Description System.Linq.Expressions.LambdaExpression The generated System.Linq.Expressions.LambdaExpression | Improve this Doc View Source ParseLambda(Type, String, Object[]) Parses an expression into a LambdaExpression. (Also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.) Declaration [PublicAPI] public static LambdaExpression ParseLambda(Type resultType, string expression, params object[] values) Parameters Type Name Description System.Type resultType Type of the result. If not specified, it will be generated dynamically. System.String expression The expression. System.Object [] values An object array that contains zero or more objects which are used as replacement values. Returns Type Description System.Linq.Expressions.LambdaExpression The generated System.Linq.Expressions.LambdaExpression | Improve this Doc View Source ParseLambda(Type, Type, String, Object[]) Parses an expression into a LambdaExpression. (Also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.) Declaration [PublicAPI] public static LambdaExpression ParseLambda(Type itType, Type resultType, string expression, params object[] values) Parameters Type Name Description System.Type itType The main type from the dynamic class expression. System.Type resultType Type of the result. If not specified, it will be generated dynamically. System.String expression The expression. System.Object [] values An object array that contains zero or more objects which are used as replacement values. Returns Type Description System.Linq.Expressions.LambdaExpression The generated System.Linq.Expressions.LambdaExpression | Improve this Doc View Source ParseLambda<TResult>(ParsingConfig, Boolean, ParameterExpression[], String, Object[]) Parses an expression into a Typed Expression. Declaration [PublicAPI] public static Expression<Func<TResult>> ParseLambda<TResult>(ParsingConfig parsingConfig, bool createParameterCtor, ParameterExpression[] parameters, string expression, params object[] values) Parameters Type Name Description ParsingConfig parsingConfig The Configuration for the parsing. System.Boolean createParameterCtor if set to true then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities. System.Linq.Expressions.ParameterExpression [] parameters A array from ParameterExpressions. System.String expression The expression. System.Object [] values An object array that contains zero or more objects which are used as replacement values. Returns Type Description System.Linq.Expressions.Expression < System.Func <TResult>> The generated System.Linq.Expressions.Expression Type Parameters Name Description TResult The type of the result. | Improve this Doc View Source ParseLambda<TResult>(ParsingConfig, Boolean, String, Object[]) Parses an expression into a Typed Expression. Declaration [PublicAPI] public static Expression<Func<TResult>> ParseLambda<TResult>(ParsingConfig parsingConfig, bool createParameterCtor, string expression, params object[] values) Parameters Type Name Description ParsingConfig parsingConfig The Configuration for the parsing. System.Boolean createParameterCtor if set to true then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities. System.String expression The expression. System.Object [] values An object array that contains zero or more objects which are used as replacement values. Returns Type Description System.Linq.Expressions.Expression < System.Func <TResult>> The generated System.Linq.Expressions.Expression Type Parameters Name Description TResult The type of the result. | Improve this Doc View Source ParseLambda<TResult>(Type, ParsingConfig, Boolean, ParameterExpression[], String, Object[]) Parses an expression into a Typed Expression. Declaration [PublicAPI] public static Expression<Func<TResult>> ParseLambda<TResult>(Type delegateType, ParsingConfig parsingConfig, bool createParameterCtor, ParameterExpression[] parameters, string expression, params object[] values) Parameters Type Name Description System.Type delegateType The delegate type. ParsingConfig parsingConfig The Configuration for the parsing. System.Boolean createParameterCtor if set to true then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities. System.Linq.Expressions.ParameterExpression [] parameters A array from ParameterExpressions. System.String expression The expression. System.Object [] values An object array that contains zero or more objects which are used as replacement values. Returns Type Description System.Linq.Expressions.Expression < System.Func <TResult>> The generated System.Linq.Expressions.Expression Type Parameters Name Description TResult The type of the result. | Improve this Doc View Source ParseLambda<TResult>(Type, ParsingConfig, Boolean, String, Object[]) Parses an expression into a Typed Expression. Declaration [PublicAPI] public static Expression<Func<TResult>> ParseLambda<TResult>(Type delegateType, ParsingConfig parsingConfig, bool createParameterCtor, string expression, params object[] values) Parameters Type Name Description System.Type delegateType The delegate type. ParsingConfig parsingConfig The Configuration for the parsing. System.Boolean createParameterCtor if set to true then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities. System.String expression The expression. System.Object [] values An object array that contains zero or more objects which are used as replacement values. Returns Type Description System.Linq.Expressions.Expression < System.Func <TResult>> The generated System.Linq.Expressions.Expression Type Parameters Name Description TResult The type of the result. | Improve this Doc View Source ParseLambda<T, TResult>(ParsingConfig, Boolean, String, Object[]) Parses an expression into a Typed Expression. Declaration [PublicAPI] public static Expression<Func<T, TResult>> ParseLambda<T, TResult>(ParsingConfig parsingConfig, bool createParameterCtor, string expression, params object[] values) Parameters Type Name Description ParsingConfig parsingConfig The Configuration for the parsing. System.Boolean createParameterCtor if set to true then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities. System.String expression The expression. System.Object [] values An object array that contains zero or more objects which are used as replacement values. Returns Type Description System.Linq.Expressions.Expression < System.Func <T, TResult>> The generated System.Linq.Expressions.Expression Type Parameters Name Description T The it -Type. TResult The type of the result. | Improve this Doc View Source ParseLambda<T, TResult>(Type, ParsingConfig, Boolean, String, Object[]) Parses an expression into a Typed Expression. Declaration [PublicAPI] public static Expression<Func<T, TResult>> ParseLambda<T, TResult>(Type delegateType, ParsingConfig parsingConfig, bool createParameterCtor, string expression, params object[] values) Parameters Type Name Description System.Type delegateType The delegate type. ParsingConfig parsingConfig The Configuration for the parsing. System.Boolean createParameterCtor if set to true then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities. System.String expression The expression. System.Object [] values An object array that contains zero or more objects which are used as replacement values. Returns Type Description System.Linq.Expressions.Expression < System.Func <T, TResult>> The generated System.Linq.Expressions.Expression Type Parameters Name Description T The it -Type. TResult The type of the result."
  },
  "api/System.Linq.Dynamic.Core.DynamicProperty.html": {
    "href": "api/System.Linq.Dynamic.Core.DynamicProperty.html",
    "title": "Class DynamicProperty",
    "keywords": "Class DynamicProperty DynamicProperty Inheritance System.Object DynamicProperty Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : System.Linq.Dynamic.Core Assembly : System.Linq.Dynamic.Core.dll Syntax public class DynamicProperty Constructors | Improve this Doc View Source DynamicProperty(String, Type) Initializes a new instance of the DynamicProperty class. Declaration public DynamicProperty(string name, Type type) Parameters Type Name Description System.String name The name from the property. System.Type type The type from the property. Properties | Improve this Doc View Source Name Gets the name from the property. Declaration public string Name { get; } Property Value Type Description System.String The name from the property. | Improve this Doc View Source Type Gets the type from the property. Declaration public Type Type { get; } Property Value Type Description System.Type The type from the property."
  },
  "api/System.Linq.Dynamic.Core.DynamicQueryableExtensions.html": {
    "href": "api/System.Linq.Dynamic.Core.DynamicQueryableExtensions.html",
    "title": "Class DynamicQueryableExtensions",
    "keywords": "Class DynamicQueryableExtensions Provides a set of static (Shared in Visual Basic) methods for querying data structures that implement System.Linq.IQueryable . It allows dynamic string based querying. Very handy when, at compile time, you don't know the type of queries that will be generated, or when downstream components only return column names to sort and filter by. Inheritance System.Object DynamicQueryableExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : System.Linq.Dynamic.Core Assembly : System.Linq.Dynamic.Core.dll Syntax public static class DynamicQueryableExtensions Methods | Improve this Doc View Source Aggregate(IQueryable, String, String) Dynamically runs an aggregate function on the IQueryable. Declaration public static object Aggregate(this IQueryable source, string function, string member) Parameters Type Name Description System.Linq.IQueryable source The IQueryable data source. System.String function The name of the function to run. Can be Sum, Average, Min or Max. System.String member The name of the property to aggregate over. Returns Type Description System.Object The value of the aggregate function run over the specified property. | Improve this Doc View Source All(IQueryable, ParsingConfig, String, Object[]) Determines whether all the elements of a sequence satisfy a condition. Declaration [PublicAPI] public static bool All(this IQueryable source, ParsingConfig config, string predicate, params object[] args) Parameters Type Name Description System.Linq.IQueryable source A sequence whose elements to test for a condition. ParsingConfig config The ParsingConfig . System.String predicate A function to test each element for a condition. System.Object [] args An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings. Returns Type Description System.Boolean true if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, false. | Improve this Doc View Source All(IQueryable, String, Object[]) Determines whether all the elements of a sequence satisfy a condition. Declaration [PublicAPI] public static bool All(this IQueryable source, string predicate, params object[] args) Parameters Type Name Description System.Linq.IQueryable source A sequence whose elements to test for a condition. System.String predicate A function to test each element for a condition. System.Object [] args An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings. Returns Type Description System.Boolean true if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, false. | Improve this Doc View Source Any(IQueryable) Determines whether a sequence contains any elements. Declaration public static bool Any(this IQueryable source) Parameters Type Name Description System.Linq.IQueryable source A sequence to check for being empty. Returns Type Description System.Boolean true if the source sequence contains any elements; otherwise, false. Examples IQueryable queryable = employees.AsQueryable(); var result = queryable.Any(); | Improve this Doc View Source Any(IQueryable, ParsingConfig, String, Object[]) Determines whether a sequence contains any elements. Declaration [PublicAPI] public static bool Any(this IQueryable source, ParsingConfig config, string predicate, params object[] args) Parameters Type Name Description System.Linq.IQueryable source A sequence to check for being empty. ParsingConfig config The ParsingConfig . System.String predicate A function to test each element for a condition. System.Object [] args An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings. Returns Type Description System.Boolean true if the source sequence contains any elements; otherwise, false. Examples IQueryable queryable = employees.AsQueryable(); var result1 = queryable.Any(\"Income > 50\"); var result2 = queryable.Any(\"Income > @0\", 50); var result3 = queryable.Select(\"Roles.Any()\"); | Improve this Doc View Source Any(IQueryable, LambdaExpression) Determines whether a sequence contains any elements. Declaration public static bool Any(this IQueryable source, LambdaExpression lambda) Parameters Type Name Description System.Linq.IQueryable source A sequence to check for being empty. System.Linq.Expressions.LambdaExpression lambda A cached Lambda Expression. Returns Type Description System.Boolean true if the source sequence contains any elements; otherwise, false. | Improve this Doc View Source Any(IQueryable, String, Object[]) Determines whether a sequence contains any elements. Declaration public static bool Any(this IQueryable source, string predicate, params object[] args) Parameters Type Name Description System.Linq.IQueryable source System.String predicate System.Object [] args Returns Type Description System.Boolean true if the source sequence contains any elements; otherwise, false. | Improve this Doc View Source AsDynamicEnumerable(IQueryable) Returns the input typed as System.Collections.Generic.IEnumerable<T> of System.Object ./> Declaration public static IEnumerable<object> AsDynamicEnumerable(this IQueryable source) Parameters Type Name Description System.Linq.IQueryable source The sequence to type as System.Collections.Generic.IEnumerable<T> of System.Object . Returns Type Description System.Collections.Generic.IEnumerable < System.Object > The input typed as System.Collections.Generic.IEnumerable<T> of System.Object . | Improve this Doc View Source Average(IQueryable) Computes the average of a sequence of numeric values. Declaration [PublicAPI] public static double Average(this IQueryable source) Parameters Type Name Description System.Linq.IQueryable source A sequence of numeric values to calculate the average of. Returns Type Description System.Double The average of the values in the sequence. Examples IQueryable queryable = employees.AsQueryable(); var result1 = queryable.Average(); var result2 = queryable.Select(\"Roles.Average()\"); | Improve this Doc View Source Average(IQueryable, ParsingConfig, String, Object[]) Computes the average of a sequence of numeric values. Declaration [PublicAPI] public static double Average(this IQueryable source, ParsingConfig config, string predicate, params object[] args) Parameters Type Name Description System.Linq.IQueryable source A sequence of numeric values to calculate the average of. ParsingConfig config The ParsingConfig . System.String predicate A function to test each element for a condition. System.Object [] args An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings. Returns Type Description System.Double The average of the values in the sequence. Examples IQueryable queryable = employees.AsQueryable(); var result = queryable.Average(\"Income\"); | Improve this Doc View Source Average(IQueryable, LambdaExpression) Computes the average of a sequence of numeric values. Declaration [PublicAPI] public static double Average(this IQueryable source, LambdaExpression lambda) Parameters Type Name Description System.Linq.IQueryable source A sequence of numeric values to calculate the average of. System.Linq.Expressions.LambdaExpression lambda A Lambda Expression. Returns Type Description System.Double The average of the values in the sequence. | Improve this Doc View Source Average(IQueryable, String, Object[]) Computes the average of a sequence of numeric values. Declaration [PublicAPI] public static double Average(this IQueryable source, string predicate, params object[] args) Parameters Type Name Description System.Linq.IQueryable source System.String predicate System.Object [] args Returns Type Description System.Double The average of the values in the sequence. | Improve this Doc View Source Cast(IQueryable, ParsingConfig, String) Converts the elements of an System.Linq.IQueryable to the specified type. Declaration public static IQueryable Cast(this IQueryable source, ParsingConfig config, string typeName) Parameters Type Name Description System.Linq.IQueryable source The System.Linq.IQueryable that contains the elements to be converted. ParsingConfig config The ParsingConfig . System.String typeName The type to convert the elements of source to. Returns Type Description System.Linq.IQueryable An System.Linq.IQueryable that contains each element of the source sequence converted to the specified type. | Improve this Doc View Source Cast(IQueryable, String) Converts the elements of an System.Linq.IQueryable to the specified type. Declaration public static IQueryable Cast(this IQueryable source, string typeName) Parameters Type Name Description System.Linq.IQueryable source The System.Linq.IQueryable that contains the elements to be converted. System.String typeName The type to convert the elements of source to. Returns Type Description System.Linq.IQueryable An System.Linq.IQueryable that contains each element of the source sequence converted to the specified type. | Improve this Doc View Source Cast(IQueryable, Type) Converts the elements of an System.Linq.IQueryable to the specified type. Declaration public static IQueryable Cast(this IQueryable source, Type type) Parameters Type Name Description System.Linq.IQueryable source The System.Linq.IQueryable that contains the elements to be converted. System.Type type The type to convert the elements of source to. Returns Type Description System.Linq.IQueryable An System.Linq.IQueryable that contains each element of the source sequence converted to the specified type. | Improve this Doc View Source Count(IQueryable) Returns the number of elements in a sequence. Declaration public static int Count(this IQueryable source) Parameters Type Name Description System.Linq.IQueryable source The System.Linq.IQueryable that contains the elements to be counted. Returns Type Description System.Int32 The number of elements in the input sequence. Examples IQueryable queryable = employees.AsQueryable(); var result = queryable.Count(); | Improve this Doc View Source Count(IQueryable, ParsingConfig, String, Object[]) Returns the number of elements in a sequence. Declaration [PublicAPI] public static int Count(this IQueryable source, ParsingConfig config, string predicate, params object[] args) Parameters Type Name Description System.Linq.IQueryable source The System.Linq.IQueryable that contains the elements to be counted. ParsingConfig config The ParsingConfig . System.String predicate A function to test each element for a condition. System.Object [] args An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings. Returns Type Description System.Int32 The number of elements in the specified sequence that satisfies a condition. Examples IQueryable queryable = employees.AsQueryable(); var result1 = queryable.Count(\"Income > 50\"); var result2 = queryable.Count(\"Income > @0\", 50); var result3 = queryable.Select(\"Roles.Count()\"); | Improve this Doc View Source Count(IQueryable, LambdaExpression) Returns the number of elements in a sequence. Declaration public static int Count(this IQueryable source, LambdaExpression lambda) Parameters Type Name Description System.Linq.IQueryable source The System.Linq.IQueryable that contains the elements to be counted. System.Linq.Expressions.LambdaExpression lambda A cached Lambda Expression. Returns Type Description System.Int32 The number of elements in the specified sequence that satisfies a condition. | Improve this Doc View Source Count(IQueryable, String, Object[]) Returns the number of elements in a sequence. Declaration public static int Count(this IQueryable source, string predicate, params object[] args) Parameters Type Name Description System.Linq.IQueryable source System.String predicate System.Object [] args Returns Type Description System.Int32 The number of elements in the specified sequence that satisfies a condition. | Improve this Doc View Source DefaultIfEmpty(IQueryable) Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty. Declaration public static IQueryable DefaultIfEmpty(this IQueryable source) Parameters Type Name Description System.Linq.IQueryable source The System.Linq.IQueryable to return a default value for if empty. Returns Type Description System.Linq.IQueryable An System.Linq.IQueryable that contains default if source is empty; otherwise, source. Examples IQueryable queryable = employees.DefaultIfEmpty(); | Improve this Doc View Source DefaultIfEmpty(IQueryable, Object) Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty. Declaration public static IQueryable DefaultIfEmpty(this IQueryable source, object defaultValue) Parameters Type Name Description System.Linq.IQueryable source The System.Linq.IQueryable to return a default value for if empty. System.Object defaultValue The value to return if the sequence is empty. Returns Type Description System.Linq.IQueryable An System.Linq.IQueryable that contains defaultValue if source is empty; otherwise, source. Examples IQueryable queryable = employees.DefaultIfEmpty(new Employee()); | Improve this Doc View Source Distinct(IQueryable) Returns distinct elements from a sequence by using the default equality comparer to compare values. Declaration public static IQueryable Distinct(this IQueryable source) Parameters Type Name Description System.Linq.IQueryable source The sequence to remove duplicate elements from. Returns Type Description System.Linq.IQueryable An System.Linq.IQueryable that contains distinct elements from the source sequence. Examples IQueryable queryable = employees.AsQueryable(); var result1 = queryable.Distinct(); var result2 = queryable.Select(\"Roles.Distinct()\"); | Improve this Doc View Source First(IQueryable) Returns the first element of a sequence. Declaration public static object First(this IQueryable source) Parameters Type Name Description System.Linq.IQueryable source The System.Linq.IQueryable to return the first element of. Returns Type Description System.Object The first element in source. | Improve this Doc View Source First(IQueryable, ParsingConfig, String, Object[]) Returns the first element of a sequence that satisfies a specified condition. Declaration [PublicAPI] public static object First(this IQueryable source, ParsingConfig config, string predicate, params object[] args) Parameters Type Name Description System.Linq.IQueryable source The System.Linq.IQueryable to return the first element of. ParsingConfig config The ParsingConfig . System.String predicate A function to test each element for a condition. System.Object [] args An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings. Returns Type Description System.Object The first element in source that passes the test in predicate. | Improve this Doc View Source First(IQueryable, LambdaExpression) Returns the first element of a sequence that satisfies a specified condition. Declaration public static object First(this IQueryable source, LambdaExpression lambda) Parameters Type Name Description System.Linq.IQueryable source The System.Linq.IQueryable to return the first element of. System.Linq.Expressions.LambdaExpression lambda A cached Lambda Expression. Returns Type Description System.Object The first element in source that passes the test in predicate. | Improve this Doc View Source First(IQueryable, String, Object[]) Returns the first element of a sequence that satisfies a specified condition. Declaration public static object First(this IQueryable source, string predicate, params object[] args) Parameters Type Name Description System.Linq.IQueryable source System.String predicate System.Object [] args Returns Type Description System.Object The first element in source that passes the test in predicate. | Improve this Doc View Source FirstOrDefault(IQueryable) Returns the first element of a sequence, or a default value if the sequence contains no elements. Declaration public static object FirstOrDefault(this IQueryable source) Parameters Type Name Description System.Linq.IQueryable source The System.Linq.IQueryable to return the first element of. Returns Type Description System.Object default if source is empty; otherwise, the first element in source. | Improve this Doc View Source FirstOrDefault(IQueryable, ParsingConfig, String, Object[]) Returns the first element of a sequence that satisfies a specified condition or a default value if no such element is found. Declaration [PublicAPI] public static object FirstOrDefault(this IQueryable source, ParsingConfig config, string predicate, params object[] args) Parameters Type Name Description System.Linq.IQueryable source The System.Linq.IQueryable to return the first element of. ParsingConfig config The ParsingConfig . System.String predicate A function to test each element for a condition. System.Object [] args An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings. Returns Type Description System.Object default if source is empty or if no element passes the test specified by predicate; otherwise, the first element in source that passes the test specified by predicate. | Improve this Doc View Source FirstOrDefault(IQueryable, LambdaExpression) Returns the first element of a sequence that satisfies a specified condition or a default value if no such element is found. Declaration public static object FirstOrDefault(this IQueryable source, LambdaExpression lambda) Parameters Type Name Description System.Linq.IQueryable source The System.Linq.IQueryable to return the first element of. System.Linq.Expressions.LambdaExpression lambda A cached Lambda Expression. Returns Type Description System.Object default if source is empty or if no element passes the test specified by predicate; otherwise, the first element in source that passes the test specified by predicate. | Improve this Doc View Source FirstOrDefault(IQueryable, String, Object[]) Returns the first element of a sequence that satisfies a specified condition or a default value if no such element is found. Declaration public static object FirstOrDefault(this IQueryable source, string predicate, params object[] args) Parameters Type Name Description System.Linq.IQueryable source System.String predicate System.Object [] args Returns Type Description System.Object default if source is empty or if no element passes the test specified by predicate; otherwise, the first element in source that passes the test specified by predicate. | Improve this Doc View Source GroupBy(IQueryable, ParsingConfig, String, IEqualityComparer, Object[]) Groups the elements of a sequence according to a specified key string function and creates a result value from each group and its key. Declaration public static IQueryable GroupBy(this IQueryable source, ParsingConfig config, string keySelector, IEqualityComparer equalityComparer, params object[] args) Parameters Type Name Description System.Linq.IQueryable source A System.Linq.IQueryable whose elements to group. ParsingConfig config The ParsingConfig . System.String keySelector A string expression to specify the key for each element. System.Collections.IEqualityComparer equalityComparer The comparer to use. System.Object [] args An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings. Returns Type Description System.Linq.IQueryable A System.Linq.IQueryable where each element represents a projection over a group and its key. | Improve this Doc View Source GroupBy(IQueryable, ParsingConfig, String, Object[]) Groups the elements of a sequence according to a specified key string function and creates a result value from each group and its key. Declaration [PublicAPI] public static IQueryable GroupBy(this IQueryable source, ParsingConfig config, string keySelector, params object[] args) Parameters Type Name Description System.Linq.IQueryable source A System.Linq.IQueryable whose elements to group. ParsingConfig config The ParsingConfig . System.String keySelector A string expression to specify the key for each element. System.Object [] args An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings. Returns Type Description System.Linq.IQueryable A System.Linq.IQueryable where each element represents a projection over a group and its key. Examples var groupResult1 = queryable.GroupBy(\"NumberPropertyAsKey\"); var groupResult2 = queryable.GroupBy(\"new (NumberPropertyAsKey, StringPropertyAsKey)\"); | Improve this Doc View Source GroupBy(IQueryable, ParsingConfig, String, String) Groups the elements of a sequence according to a specified key string function and creates a result value from each group and its key. Declaration public static IQueryable GroupBy(this IQueryable source, ParsingConfig config, string keySelector, string resultSelector) Parameters Type Name Description System.Linq.IQueryable source A System.Linq.IQueryable whose elements to group. ParsingConfig config The ParsingConfig . System.String keySelector A string expression to specify the key for each element. System.String resultSelector A string expression to specify a result value from each group. Returns Type Description System.Linq.IQueryable A System.Linq.IQueryable where each element represents a projection over a group and its key. Examples var groupResult1 = queryable.GroupBy(\"NumberPropertyAsKey\", \"StringProperty\"); var groupResult2 = queryable.GroupBy(\"new (NumberPropertyAsKey, StringPropertyAsKey)\", \"new (StringProperty1, StringProperty2)\"); | Improve this Doc View Source GroupBy(IQueryable, ParsingConfig, String, String, IEqualityComparer) Groups the elements of a sequence according to a specified key string function and creates a result value from each group and its key. Declaration public static IQueryable GroupBy(this IQueryable source, ParsingConfig config, string keySelector, string resultSelector, IEqualityComparer equalityComparer) Parameters Type Name Description System.Linq.IQueryable source A System.Linq.IQueryable whose elements to group. ParsingConfig config The ParsingConfig . System.String keySelector A string expression to specify the key for each element. System.String resultSelector A string expression to specify a result value from each group. System.Collections.IEqualityComparer equalityComparer The comparer to use. Returns Type Description System.Linq.IQueryable A System.Linq.IQueryable where each element represents a projection over a group and its key. | Improve this Doc View Source GroupBy(IQueryable, ParsingConfig, String, String, IEqualityComparer, Object[]) Groups the elements of a sequence according to a specified key string function and creates a result value from each group and its key. Declaration public static IQueryable GroupBy(this IQueryable source, ParsingConfig config, string keySelector, string resultSelector, IEqualityComparer equalityComparer, object[] args) Parameters Type Name Description System.Linq.IQueryable source A System.Linq.IQueryable whose elements to group. ParsingConfig config The ParsingConfig . System.String keySelector A string expression to specify the key for each element. System.String resultSelector A string expression to specify a result value from each group. System.Collections.IEqualityComparer equalityComparer The comparer to use. System.Object [] args An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings. Returns Type Description System.Linq.IQueryable A System.Linq.IQueryable where each element represents a projection over a group and its key. | Improve this Doc View Source GroupBy(IQueryable, ParsingConfig, String, String, Object[]) Groups the elements of a sequence according to a specified key string function and creates a result value from each group and its key. Declaration [PublicAPI] public static IQueryable GroupBy(this IQueryable source, ParsingConfig config, string keySelector, string resultSelector, object[] args) Parameters Type Name Description System.Linq.IQueryable source A System.Linq.IQueryable whose elements to group. ParsingConfig config The ParsingConfig . System.String keySelector A string expression to specify the key for each element. System.String resultSelector A string expression to specify a result value from each group. System.Object [] args An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings. Returns Type Description System.Linq.IQueryable A System.Linq.IQueryable where each element represents a projection over a group and its key. Examples var groupResult1 = queryable.GroupBy(\"NumberPropertyAsKey\", \"StringProperty\"); var groupResult2 = queryable.GroupBy(\"new (NumberPropertyAsKey, StringPropertyAsKey)\", \"new (StringProperty1, StringProperty2)\"); | Improve this Doc View Source GroupBy(IQueryable, String, IEqualityComparer, Object[]) Groups the elements of a sequence according to a specified key string function and creates a result value from each group and its key. Declaration public static IQueryable GroupBy(this IQueryable source, string keySelector, IEqualityComparer equalityComparer, params object[] args) Parameters Type Name Description System.Linq.IQueryable source System.String keySelector System.Collections.IEqualityComparer equalityComparer System.Object [] args Returns Type Description System.Linq.IQueryable A System.Linq.IQueryable where each element represents a projection over a group and its key. | Improve this Doc View Source GroupBy(IQueryable, String, Object[]) Groups the elements of a sequence according to a specified key string function and creates a result value from each group and its key. Declaration [PublicAPI] public static IQueryable GroupBy(this IQueryable source, string keySelector, params object[] args) Parameters Type Name Description System.Linq.IQueryable source System.String keySelector System.Object [] args Returns Type Description System.Linq.IQueryable A System.Linq.IQueryable where each element represents a projection over a group and its key. | Improve this Doc View Source GroupBy(IQueryable, String, String) Groups the elements of a sequence according to a specified key string function and creates a result value from each group and its key. Declaration public static IQueryable GroupBy(this IQueryable source, string keySelector, string resultSelector) Parameters Type Name Description System.Linq.IQueryable source System.String keySelector System.String resultSelector Returns Type Description System.Linq.IQueryable A System.Linq.IQueryable where each element represents a projection over a group and its key. | Improve this Doc View Source GroupBy(IQueryable, String, String, IEqualityComparer) Groups the elements of a sequence according to a specified key string function and creates a result value from each group and its key. Declaration public static IQueryable GroupBy(this IQueryable source, string keySelector, string resultSelector, IEqualityComparer equalityComparer) Parameters Type Name Description System.Linq.IQueryable source System.String keySelector System.String resultSelector System.Collections.IEqualityComparer equalityComparer Returns Type Description System.Linq.IQueryable A System.Linq.IQueryable where each element represents a projection over a group and its key. | Improve this Doc View Source GroupBy(IQueryable, String, String, IEqualityComparer, Object[]) Groups the elements of a sequence according to a specified key string function and creates a result value from each group and its key. Declaration public static IQueryable GroupBy(this IQueryable source, string keySelector, string resultSelector, IEqualityComparer equalityComparer, object[] args) Parameters Type Name Description System.Linq.IQueryable source System.String keySelector System.String resultSelector System.Collections.IEqualityComparer equalityComparer System.Object [] args Returns Type Description System.Linq.IQueryable A System.Linq.IQueryable where each element represents a projection over a group and its key. | Improve this Doc View Source GroupBy(IQueryable, String, String, Object[]) Groups the elements of a sequence according to a specified key string function and creates a result value from each group and its key. Declaration [PublicAPI] public static IQueryable GroupBy(this IQueryable source, string keySelector, string resultSelector, object[] args) Parameters Type Name Description System.Linq.IQueryable source System.String keySelector System.String resultSelector System.Object [] args Returns Type Description System.Linq.IQueryable A System.Linq.IQueryable where each element represents a projection over a group and its key. | Improve this Doc View Source GroupByMany<TElement>(IEnumerable<TElement>, Func<TElement, Object>[]) Groups the elements of a sequence according to multiple specified key functions and creates a result value from each group (and subgroups) and its key. Declaration public static IEnumerable<GroupResult> GroupByMany<TElement>(this IEnumerable<TElement> source, params Func<TElement, object>[] keySelectors) Parameters Type Name Description System.Collections.Generic.IEnumerable <TElement> source A System.Collections.Generic.IEnumerable<T> whose elements to group. System.Func <TElement, System.Object >[] keySelectors Lambda expressions to specify the keys for each element. Returns Type Description System.Collections.Generic.IEnumerable < GroupResult > A System.Collections.Generic.IEnumerable<T> of type GroupResult where each element represents a projection over a group, its key, and its subgroups. Type Parameters Name Description TElement | Improve this Doc View Source GroupByMany<TElement>(IEnumerable<TElement>, ParsingConfig, String[]) Groups the elements of a sequence according to multiple specified key string functions and creates a result value from each group (and subgroups) and its key. Declaration public static IEnumerable<GroupResult> GroupByMany<TElement>(this IEnumerable<TElement> source, ParsingConfig config, params string[] keySelectors) Parameters Type Name Description System.Collections.Generic.IEnumerable <TElement> source A System.Collections.Generic.IEnumerable<T> whose elements to group. ParsingConfig config The ParsingConfig . System.String [] keySelectors System.String expressions to specify the keys for each element. Returns Type Description System.Collections.Generic.IEnumerable < GroupResult > A System.Collections.Generic.IEnumerable<T> of type GroupResult where each element represents a projection over a group, its key, and its subgroups. Type Parameters Name Description TElement | Improve this Doc View Source GroupByMany<TElement>(IEnumerable<TElement>, String[]) Groups the elements of a sequence according to multiple specified key string functions and creates a result value from each group (and subgroups) and its key. Declaration public static IEnumerable<GroupResult> GroupByMany<TElement>(this IEnumerable<TElement> source, params string[] keySelectors) Parameters Type Name Description System.Collections.Generic.IEnumerable <TElement> source System.String [] keySelectors Returns Type Description System.Collections.Generic.IEnumerable < GroupResult > A System.Collections.Generic.IEnumerable<T> of type GroupResult where each element represents a projection over a group, its key, and its subgroups. Type Parameters Name Description TElement | Improve this Doc View Source GroupJoin(IQueryable, IEnumerable, String, String, String, Object[]) Correlates the elements of two sequences based on equality of keys and groups the results. The default equality comparer is used to compare keys. Declaration public static IQueryable GroupJoin(this IQueryable outer, IEnumerable inner, string outerKeySelector, string innerKeySelector, string resultSelector, params object[] args) Parameters Type Name Description System.Linq.IQueryable outer System.Collections.IEnumerable inner System.String outerKeySelector System.String innerKeySelector System.String resultSelector System.Object [] args Returns Type Description System.Linq.IQueryable An System.Linq.IQueryable obtained by performing a grouped join on two sequences. | Improve this Doc View Source GroupJoin(IQueryable, ParsingConfig, IEnumerable, String, String, String, Object[]) Correlates the elements of two sequences based on equality of keys and groups the results. The default equality comparer is used to compare keys. Declaration public static IQueryable GroupJoin(this IQueryable outer, ParsingConfig config, IEnumerable inner, string outerKeySelector, string innerKeySelector, string resultSelector, params object[] args) Parameters Type Name Description System.Linq.IQueryable outer The first sequence to join. ParsingConfig config The ParsingConfig . System.Collections.IEnumerable inner The sequence to join to the first sequence. System.String outerKeySelector A dynamic function to extract the join key from each element of the first sequence. System.String innerKeySelector A dynamic function to extract the join key from each element of the second sequence. System.String resultSelector A dynamic function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence. System.Object [] args An object array that contains zero or more objects to insert into the predicates as parameters. Similar to the way String.Format formats strings. Returns Type Description System.Linq.IQueryable An System.Linq.IQueryable obtained by performing a grouped join on two sequences. | Improve this Doc View Source Join(IQueryable, IEnumerable, String, String, String, Object[]) Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys. Declaration public static IQueryable Join(this IQueryable outer, IEnumerable inner, string outerKeySelector, string innerKeySelector, string resultSelector, params object[] args) Parameters Type Name Description System.Linq.IQueryable outer System.Collections.IEnumerable inner System.String outerKeySelector System.String innerKeySelector System.String resultSelector System.Object [] args Returns Type Description System.Linq.IQueryable An System.Linq.IQueryable obtained by performing an inner join on two sequences. | Improve this Doc View Source Join(IQueryable, ParsingConfig, IEnumerable, String, String, String, Object[]) Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys. Declaration public static IQueryable Join(this IQueryable outer, ParsingConfig config, IEnumerable inner, string outerKeySelector, string innerKeySelector, string resultSelector, params object[] args) Parameters Type Name Description System.Linq.IQueryable outer The first sequence to join. ParsingConfig config The ParsingConfig . System.Collections.IEnumerable inner The sequence to join to the first sequence. System.String outerKeySelector A dynamic function to extract the join key from each element of the first sequence. System.String innerKeySelector A dynamic function to extract the join key from each element of the second sequence. System.String resultSelector A dynamic function to create a result element from two matching elements. System.Object [] args An object array that contains zero or more objects to insert into the predicates as parameters. Similar to the way String.Format formats strings. Returns Type Description System.Linq.IQueryable An System.Linq.IQueryable obtained by performing an inner join on two sequences. | Improve this Doc View Source Join<TElement>(IQueryable<TElement>, IEnumerable<TElement>, String, String, String, Object[]) Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys. Declaration public static IQueryable<TElement> Join<TElement>(this IQueryable<TElement> outer, IEnumerable<TElement> inner, string outerKeySelector, string innerKeySelector, string resultSelector, params object[] args) Parameters Type Name Description System.Linq.IQueryable <TElement> outer System.Collections.Generic.IEnumerable <TElement> inner System.String outerKeySelector System.String innerKeySelector System.String resultSelector System.Object [] args Returns Type Description System.Linq.IQueryable <TElement> An System.Linq.IQueryable<T> that has elements of type TResult obtained by performing an inner join on two sequences. Type Parameters Name Description TElement The type of the elements of both sequences, and the result. Remarks This overload only works on elements where both sequences and the resulting element match. | Improve this Doc View Source Join<TElement>(IQueryable<TElement>, ParsingConfig, IEnumerable<TElement>, String, String, String, Object[]) Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys. Declaration public static IQueryable<TElement> Join<TElement>(this IQueryable<TElement> outer, ParsingConfig config, IEnumerable<TElement> inner, string outerKeySelector, string innerKeySelector, string resultSelector, params object[] args) Parameters Type Name Description System.Linq.IQueryable <TElement> outer The first sequence to join. ParsingConfig config The ParsingConfig . System.Collections.Generic.IEnumerable <TElement> inner The sequence to join to the first sequence. System.String outerKeySelector A dynamic function to extract the join key from each element of the first sequence. System.String innerKeySelector A dynamic function to extract the join key from each element of the second sequence. System.String resultSelector A dynamic function to create a result element from two matching elements. System.Object [] args An object array that contains zero or more objects to insert into the predicates as parameters. Similar to the way String.Format formats strings. Returns Type Description System.Linq.IQueryable <TElement> An System.Linq.IQueryable<T> that has elements of type TResult obtained by performing an inner join on two sequences. Type Parameters Name Description TElement The type of the elements of both sequences, and the result. Remarks This overload only works on elements where both sequences and the resulting element match. | Improve this Doc View Source Last(IQueryable) Returns the last element of a sequence. Declaration public static object Last(this IQueryable source) Parameters Type Name Description System.Linq.IQueryable source The System.Linq.IQueryable to return the last element of. Returns Type Description System.Object The last element in source. | Improve this Doc View Source Last(IQueryable, ParsingConfig, String, Object[]) Returns the last element of a sequence that satisfies a specified condition. Declaration public static object Last(this IQueryable source, ParsingConfig config, string predicate, params object[] args) Parameters Type Name Description System.Linq.IQueryable source The System.Linq.IQueryable to return the last element of. ParsingConfig config The ParsingConfig . System.String predicate A function to test each element for a condition. System.Object [] args An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings. Returns Type Description System.Object The first element in source that passes the test in predicate. | Improve this Doc View Source Last(IQueryable, LambdaExpression) Returns the last element of a sequence that satisfies a specified condition. Declaration public static object Last(this IQueryable source, LambdaExpression lambda) Parameters Type Name Description System.Linq.IQueryable source The System.Linq.IQueryable to return the last element of. System.Linq.Expressions.LambdaExpression lambda A cached Lambda Expression. Returns Type Description System.Object The first element in source that passes the test in predicate. | Improve this Doc View Source Last(IQueryable, String, Object[]) Returns the last element of a sequence that satisfies a specified condition. Declaration public static object Last(this IQueryable source, string predicate, params object[] args) Parameters Type Name Description System.Linq.IQueryable source System.String predicate System.Object [] args Returns Type Description System.Object The first element in source that passes the test in predicate. | Improve this Doc View Source LastOrDefault(IQueryable) Returns the last element of a sequence, or a default value if the sequence contains no elements. Declaration public static object LastOrDefault(this IQueryable source) Parameters Type Name Description System.Linq.IQueryable source The System.Linq.IQueryable to return the last element of. Returns Type Description System.Object default if source is empty; otherwise, the last element in source. | Improve this Doc View Source LastOrDefault(IQueryable, ParsingConfig, String, Object[]) Returns the last element of a sequence that satisfies a specified condition, or a default value if the sequence contains no elements. Declaration public static object LastOrDefault(this IQueryable source, ParsingConfig config, string predicate, params object[] args) Parameters Type Name Description System.Linq.IQueryable source The System.Linq.IQueryable to return the last element of. ParsingConfig config The ParsingConfig . System.String predicate A function to test each element for a condition. System.Object [] args An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings. Returns Type Description System.Object The first element in source that passes the test in predicate. | Improve this Doc View Source LastOrDefault(IQueryable, LambdaExpression) Returns the last element of a sequence that satisfies a specified condition, or a default value if the sequence contains no elements. Declaration public static object LastOrDefault(this IQueryable source, LambdaExpression lambda) Parameters Type Name Description System.Linq.IQueryable source The System.Linq.IQueryable to return the last element of. System.Linq.Expressions.LambdaExpression lambda A cached Lambda Expression. Returns Type Description System.Object The first element in source that passes the test in predicate. | Improve this Doc View Source LastOrDefault(IQueryable, String, Object[]) Returns the last element of a sequence that satisfies a specified condition, or a default value if the sequence contains no elements. Declaration public static object LastOrDefault(this IQueryable source, string predicate, params object[] args) Parameters Type Name Description System.Linq.IQueryable source System.String predicate System.Object [] args Returns Type Description System.Object The first element in source that passes the test in predicate. | Improve this Doc View Source LongCount(IQueryable) Returns the number of elements in a sequence. Declaration public static long LongCount(this IQueryable source) Parameters Type Name Description System.Linq.IQueryable source The System.Linq.IQueryable that contains the elements to be counted. Returns Type Description System.Int64 The number of elements in the input sequence. Examples IQueryable queryable = employees.AsQueryable(); var result = queryable.LongCount(); | Improve this Doc View Source LongCount(IQueryable, ParsingConfig, String, Object[]) Returns the number of elements in a sequence. Declaration [PublicAPI] public static long LongCount(this IQueryable source, ParsingConfig config, string predicate, params object[] args) Parameters Type Name Description System.Linq.IQueryable source The System.Linq.IQueryable that contains the elements to be counted. ParsingConfig config The ParsingConfig . System.String predicate A function to test each element for a condition. System.Object [] args An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings. Returns Type Description System.Int64 The number of elements in the specified sequence that satisfies a condition. Examples IQueryable queryable = employees.AsQueryable(); var result1 = queryable.LongCount(\"Income > 50\"); var result2 = queryable.LongCount(\"Income > @0\", 50); var result3 = queryable.Select(\"Roles.LongCount()\"); | Improve this Doc View Source LongCount(IQueryable, LambdaExpression) Returns the number of elements in a sequence. Declaration public static long LongCount(this IQueryable source, LambdaExpression lambda) Parameters Type Name Description System.Linq.IQueryable source The System.Linq.IQueryable that contains the elements to be counted. System.Linq.Expressions.LambdaExpression lambda A cached Lambda Expression. Returns Type Description System.Int64 The number of elements in the specified sequence that satisfies a condition. | Improve this Doc View Source LongCount(IQueryable, String, Object[]) Returns the number of elements in a sequence. Declaration public static long LongCount(this IQueryable source, string predicate, params object[] args) Parameters Type Name Description System.Linq.IQueryable source System.String predicate System.Object [] args Returns Type Description System.Int64 The number of elements in the specified sequence that satisfies a condition. | Improve this Doc View Source Max(IQueryable) Computes the max element of a sequence. Declaration [PublicAPI] public static object Max(this IQueryable source) Parameters Type Name Description System.Linq.IQueryable source A sequence of values to calculate find the max for. Returns Type Description System.Object The max element in the sequence. Examples IQueryable queryable = employees.AsQueryable(); var result1 = queryable.Max(); var result2 = queryable.Select(\"Roles.Max()\"); | Improve this Doc View Source Max(IQueryable, ParsingConfig, String, Object[]) Computes the max element of a sequence. Declaration [PublicAPI] public static object Max(this IQueryable source, ParsingConfig config, string predicate, params object[] args) Parameters Type Name Description System.Linq.IQueryable source A sequence of values to calculate find the max for. ParsingConfig config The ParsingConfig . System.String predicate A function to test each element for a condition. System.Object [] args An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings. Returns Type Description System.Object The max element in the sequence. Examples IQueryable queryable = employees.AsQueryable(); var result = queryable.Max(\"Income\"); | Improve this Doc View Source Max(IQueryable, LambdaExpression) Computes the max element of a sequence. Declaration [PublicAPI] public static object Max(this IQueryable source, LambdaExpression lambda) Parameters Type Name Description System.Linq.IQueryable source A sequence of values to calculate find the max for. System.Linq.Expressions.LambdaExpression lambda A Lambda Expression. Returns Type Description System.Object The max element in the sequence. | Improve this Doc View Source Max(IQueryable, String, Object[]) Computes the max element of a sequence. Declaration [PublicAPI] public static object Max(this IQueryable source, string predicate, params object[] args) Parameters Type Name Description System.Linq.IQueryable source System.String predicate System.Object [] args Returns Type Description System.Object The max element in the sequence. | Improve this Doc View Source Min(IQueryable) Computes the min element of a sequence. Declaration [PublicAPI] public static object Min(this IQueryable source) Parameters Type Name Description System.Linq.IQueryable source A sequence of values to calculate find the min for. Returns Type Description System.Object The min element in the sequence. Examples IQueryable queryable = employees.AsQueryable(); var result1 = queryable.Min(); var result2 = queryable.Select(\"Roles.Min()\"); | Improve this Doc View Source Min(IQueryable, ParsingConfig, String, Object[]) Computes the min element of a sequence. Declaration [PublicAPI] public static object Min(this IQueryable source, ParsingConfig config, string predicate, params object[] args) Parameters Type Name Description System.Linq.IQueryable source A sequence of values to calculate find the min for. ParsingConfig config The ParsingConfig . System.String predicate A function to test each element for a condition. System.Object [] args An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings. Returns Type Description System.Object The min element in the sequence. Examples IQueryable queryable = employees.AsQueryable(); var result = queryable.Min(\"Income\"); | Improve this Doc View Source Min(IQueryable, LambdaExpression) Computes the min element of a sequence. Declaration [PublicAPI] public static object Min(this IQueryable source, LambdaExpression lambda) Parameters Type Name Description System.Linq.IQueryable source A sequence of values to calculate find the min for. System.Linq.Expressions.LambdaExpression lambda A Lambda Expression. Returns Type Description System.Object The min element in the sequence. | Improve this Doc View Source Min(IQueryable, String, Object[]) Computes the min element of a sequence. Declaration [PublicAPI] public static object Min(this IQueryable source, string predicate, params object[] args) Parameters Type Name Description System.Linq.IQueryable source System.String predicate System.Object [] args Returns Type Description System.Object The min element in the sequence. | Improve this Doc View Source OfType(IQueryable, ParsingConfig, String) Filters the elements of an System.Linq.IQueryable based on a specified type. Declaration public static IQueryable OfType(this IQueryable source, ParsingConfig config, string typeName) Parameters Type Name Description System.Linq.IQueryable source An System.Linq.IQueryable whose elements to filter. ParsingConfig config The ParsingConfig . System.String typeName The type to filter the elements of the sequence on. Returns Type Description System.Linq.IQueryable A collection that contains the elements from source that have the type. | Improve this Doc View Source OfType(IQueryable, String) Filters the elements of an System.Linq.IQueryable based on a specified type. Declaration public static IQueryable OfType(this IQueryable source, string typeName) Parameters Type Name Description System.Linq.IQueryable source An System.Linq.IQueryable whose elements to filter. System.String typeName The type to filter the elements of the sequence on. Returns Type Description System.Linq.IQueryable A collection that contains the elements from source that have the type. | Improve this Doc View Source OfType(IQueryable, Type) Filters the elements of an System.Linq.IQueryable based on a specified type. Declaration public static IQueryable OfType(this IQueryable source, Type type) Parameters Type Name Description System.Linq.IQueryable source An System.Linq.IQueryable whose elements to filter. System.Type type The type to filter the elements of the sequence on. Returns Type Description System.Linq.IQueryable A collection that contains the elements from source that have the type. | Improve this Doc View Source OrderBy(IQueryable, ParsingConfig, String, IComparer, Object[]) Sorts the elements of a sequence in ascending or descending order according to a key. Declaration public static IOrderedQueryable OrderBy(this IQueryable source, ParsingConfig config, string ordering, IComparer comparer, params object[] args) Parameters Type Name Description System.Linq.IQueryable source A sequence of values to order. ParsingConfig config The ParsingConfig . System.String ordering An expression string to indicate values to order by. System.Collections.IComparer comparer The comparer to use. System.Object [] args An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings. Returns Type Description System.Linq.IOrderedQueryable A System.Linq.IQueryable whose elements are sorted according to the specified ordering . | Improve this Doc View Source OrderBy(IQueryable, ParsingConfig, String, Object[]) Sorts the elements of a sequence in ascending or descending order according to a key. Declaration public static IOrderedQueryable OrderBy(this IQueryable source, ParsingConfig config, string ordering, params object[] args) Parameters Type Name Description System.Linq.IQueryable source A sequence of values to order. ParsingConfig config The ParsingConfig . System.String ordering An expression string to indicate values to order by. System.Object [] args An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings. Returns Type Description System.Linq.IOrderedQueryable A System.Linq.IQueryable whose elements are sorted according to the specified ordering . Examples var resultSingle = queryable.OrderBy(\"NumberProperty\"); var resultSingleDescending = queryable.OrderBy(\"NumberProperty DESC\"); var resultMultiple = queryable.OrderBy(\"NumberProperty, StringProperty DESC\"); | Improve this Doc View Source OrderBy(IQueryable, String, IComparer, Object[]) Sorts the elements of a sequence in ascending or descending order according to a key. Declaration public static IOrderedQueryable OrderBy(this IQueryable source, string ordering, IComparer comparer, params object[] args) Parameters Type Name Description System.Linq.IQueryable source System.String ordering System.Collections.IComparer comparer System.Object [] args Returns Type Description System.Linq.IOrderedQueryable A System.Linq.IQueryable whose elements are sorted according to the specified ordering . | Improve this Doc View Source OrderBy(IQueryable, String, Object[]) Sorts the elements of a sequence in ascending or descending order according to a key. Declaration public static IOrderedQueryable OrderBy(this IQueryable source, string ordering, params object[] args) Parameters Type Name Description System.Linq.IQueryable source System.String ordering System.Object [] args Returns Type Description System.Linq.IOrderedQueryable A System.Linq.IQueryable whose elements are sorted according to the specified ordering . | Improve this Doc View Source OrderBy<TSource>(IQueryable<TSource>, ParsingConfig, String, IComparer, Object[]) Sorts the elements of a sequence in ascending or descending order according to a key. Declaration public static IOrderedQueryable<TSource> OrderBy<TSource>(this IQueryable<TSource> source, ParsingConfig config, string ordering, IComparer comparer, params object[] args) Parameters Type Name Description System.Linq.IQueryable <TSource> source A sequence of values to order. ParsingConfig config The ParsingConfig . System.String ordering An expression string to indicate values to order by. System.Collections.IComparer comparer The comparer to use. System.Object [] args An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings. Returns Type Description System.Linq.IOrderedQueryable <TSource> A System.Linq.IQueryable<T> whose elements are sorted according to the specified ordering . Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source OrderBy<TSource>(IQueryable<TSource>, ParsingConfig, String, Object[]) Sorts the elements of a sequence in ascending or descending order according to a key. Declaration public static IOrderedQueryable<TSource> OrderBy<TSource>(this IQueryable<TSource> source, ParsingConfig config, string ordering, params object[] args) Parameters Type Name Description System.Linq.IQueryable <TSource> source A sequence of values to order. ParsingConfig config The ParsingConfig . System.String ordering An expression string to indicate values to order by. System.Object [] args An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings. Returns Type Description System.Linq.IOrderedQueryable <TSource> A System.Linq.IQueryable<T> whose elements are sorted according to the specified ordering . Type Parameters Name Description TSource The type of the elements of source. Examples var resultSingle = queryable.OrderBy<User>(\"NumberProperty\"); var resultSingleDescending = queryable.OrderBy<User>(\"NumberProperty DESC\"); var resultMultiple = queryable.OrderBy<User>(\"NumberProperty, StringProperty\"); | Improve this Doc View Source OrderBy<TSource>(IQueryable<TSource>, String, IComparer, Object[]) Sorts the elements of a sequence in ascending or descending order according to a key. Declaration public static IOrderedQueryable<TSource> OrderBy<TSource>(this IQueryable<TSource> source, string ordering, IComparer comparer, params object[] args) Parameters Type Name Description System.Linq.IQueryable <TSource> source A sequence of values to order. System.String ordering An expression string to indicate values to order by. System.Collections.IComparer comparer The comparer to use. System.Object [] args An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings. Returns Type Description System.Linq.IOrderedQueryable <TSource> A System.Linq.IQueryable<T> whose elements are sorted according to the specified ordering . Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source OrderBy<TSource>(IQueryable<TSource>, String, Object[]) Sorts the elements of a sequence in ascending or descending order according to a key. Declaration public static IOrderedQueryable<TSource> OrderBy<TSource>(this IQueryable<TSource> source, string ordering, params object[] args) Parameters Type Name Description System.Linq.IQueryable <TSource> source System.String ordering System.Object [] args Returns Type Description System.Linq.IOrderedQueryable <TSource> A System.Linq.IQueryable<T> whose elements are sorted according to the specified ordering . Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source Page(IQueryable, Int32, Int32) Returns the elements as paged. Declaration public static IQueryable Page(this IQueryable source, int page, int pageSize) Parameters Type Name Description System.Linq.IQueryable source The IQueryable to return elements from. System.Int32 page The page to return. System.Int32 pageSize The number of elements per page. Returns Type Description System.Linq.IQueryable A System.Linq.IQueryable that contains the paged elements. | Improve this Doc View Source Page<TSource>(IQueryable<TSource>, Int32, Int32) Returns the elements as paged. Declaration public static IQueryable<TSource> Page<TSource>(this IQueryable<TSource> source, int page, int pageSize) Parameters Type Name Description System.Linq.IQueryable <TSource> source The IQueryable to return elements from. System.Int32 page The page to return. System.Int32 pageSize The number of elements per page. Returns Type Description System.Linq.IQueryable <TSource> A System.Linq.IQueryable<T> that contains the paged elements. Type Parameters Name Description TSource The type of the source. | Improve this Doc View Source PageResult(IQueryable, Int32, Int32, Nullable<Int32>) Returns the elements as paged and include the CurrentPage, PageCount, PageSize and RowCount. Declaration public static PagedResult PageResult(this IQueryable source, int page, int pageSize, int? rowCount = null) Parameters Type Name Description System.Linq.IQueryable source The IQueryable to return elements from. System.Int32 page The page to return. System.Int32 pageSize The number of elements per page. System.Nullable < System.Int32 > rowCount If this optional parameter has been defined, this value is used as the RowCount instead of executing a Linq Count() . Returns Type Description PagedResult PagedResult | Improve this Doc View Source PageResult<TSource>(IQueryable<TSource>, Int32, Int32, Nullable<Int32>) Returns the elements as paged and include the CurrentPage, PageCount, PageSize and RowCount. Declaration public static PagedResult<TSource> PageResult<TSource>(this IQueryable<TSource> source, int page, int pageSize, int? rowCount = null) Parameters Type Name Description System.Linq.IQueryable <TSource> source The IQueryable to return elements from. System.Int32 page The page to return. System.Int32 pageSize The number of elements per page. System.Nullable < System.Int32 > rowCount If this optional parameter has been defined, this value is used as the RowCount instead of executing a Linq Count() . Returns Type Description PagedResult <TSource> PagedResult{TSource} Type Parameters Name Description TSource The type of the source. | Improve this Doc View Source Reverse(IQueryable) Inverts the order of the elements in a sequence. Declaration public static IQueryable Reverse(this IQueryable source) Parameters Type Name Description System.Linq.IQueryable source A sequence of values to reverse. Returns Type Description System.Linq.IQueryable A System.Linq.IQueryable whose elements correspond to those of the input sequence in reverse order. | Improve this Doc View Source Select(IQueryable, ParsingConfig, String, Object[]) Projects each element of a sequence into a new form. Declaration public static IQueryable Select(this IQueryable source, ParsingConfig config, string selector, params object[] args) Parameters Type Name Description System.Linq.IQueryable source A sequence of values to project. ParsingConfig config The ParsingConfig . System.String selector A projection string expression to apply to each element. System.Object [] args An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings. Returns Type Description System.Linq.IQueryable An System.Linq.IQueryable whose elements are the result of invoking a projection string on each element of source. Examples var singleField = queryable.Select(\"StringProperty\"); var dynamicObject = queryable.Select(\"new (StringProperty1, StringProperty2 as OtherStringPropertyName)\"); | Improve this Doc View Source Select(IQueryable, ParsingConfig, Type, String, Object[]) Projects each element of a sequence into a new class of type TResult. Details see http://solutionizing.net/category/linq/ Declaration public static IQueryable Select(this IQueryable source, ParsingConfig config, Type resultType, string selector, params object[] args) Parameters Type Name Description System.Linq.IQueryable source A sequence of values to project. ParsingConfig config The ParsingConfig . System.Type resultType The result type. System.String selector A projection string expression to apply to each element. System.Object [] args An object array that contains zero or more objects to insert into the predicate as parameters. Returns Type Description System.Linq.IQueryable An System.Linq.IQueryable whose elements are the result of invoking a projection string on each element of source. Examples var users = queryable.Select(typeof(User), \"new (Username, Pwd as Password)\"); | Improve this Doc View Source Select(IQueryable, String, Object[]) Projects each element of a sequence into a new form. Declaration public static IQueryable Select(this IQueryable source, string selector, params object[] args) Parameters Type Name Description System.Linq.IQueryable source System.String selector System.Object [] args Returns Type Description System.Linq.IQueryable An System.Linq.IQueryable whose elements are the result of invoking a projection string on each element of source. | Improve this Doc View Source Select(IQueryable, Type, String, Object[]) Projects each element of a sequence into a new class of type TResult. Details see http://solutionizing.net/category/linq/ Declaration public static IQueryable Select(this IQueryable source, Type resultType, string selector, params object[] args) Parameters Type Name Description System.Linq.IQueryable source System.Type resultType System.String selector System.Object [] args Returns Type Description System.Linq.IQueryable An System.Linq.IQueryable whose elements are the result of invoking a projection string on each element of source. | Improve this Doc View Source Select<TResult>(IQueryable, ParsingConfig, String, Object[]) Projects each element of a sequence into a new class of type TResult. Details see http://solutionizing.net/category/linq/ . Declaration public static IQueryable<TResult> Select<TResult>(this IQueryable source, ParsingConfig config, string selector, params object[] args) Parameters Type Name Description System.Linq.IQueryable source A sequence of values to project. ParsingConfig config The ParsingConfig . System.String selector A projection string expression to apply to each element. System.Object [] args An object array that contains zero or more objects to insert into the predicate as parameters. Returns Type Description System.Linq.IQueryable <TResult> An System.Linq.IQueryable<T> whose elements are the result of invoking a projection string on each element of source. Type Parameters Name Description TResult The type of the result. Examples var users = queryable.Select<User>(\"new (Username, Pwd as Password)\"); | Improve this Doc View Source Select<TResult>(IQueryable, String, Object[]) Projects each element of a sequence into a new class of type TResult. Details see http://solutionizing.net/category/linq/ . Declaration public static IQueryable<TResult> Select<TResult>(this IQueryable source, string selector, params object[] args) Parameters Type Name Description System.Linq.IQueryable source System.String selector System.Object [] args Returns Type Description System.Linq.IQueryable <TResult> An System.Linq.IQueryable<T> whose elements are the result of invoking a projection string on each element of source. Type Parameters Name Description TResult The type of the result. | Improve this Doc View Source SelectMany(IQueryable, ParsingConfig, String, Object[]) Projects each element of a sequence to an System.Linq.IQueryable and combines the resulting sequences into one sequence. Declaration public static IQueryable SelectMany(this IQueryable source, ParsingConfig config, string selector, params object[] args) Parameters Type Name Description System.Linq.IQueryable source A sequence of values to project. ParsingConfig config The ParsingConfig . System.String selector A projection string expression to apply to each element. System.Object [] args An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings. Returns Type Description System.Linq.IQueryable An System.Linq.IQueryable whose elements are the result of invoking a one-to-many projection function on each element of the input sequence. Examples var roles = users.SelectMany(\"Roles\"); | Improve this Doc View Source SelectMany(IQueryable, ParsingConfig, String, String, Object[], Object[]) Projects each element of a sequence to an System.Linq.IQueryable and invokes a result selector function on each element therein. The resulting values from each intermediate sequence are combined into a single, one-dimensional sequence and returned. Declaration public static IQueryable SelectMany(this IQueryable source, ParsingConfig config, string collectionSelector, string resultSelector, object[] collectionSelectorArgs = null, params object[] resultSelectorArgs) Parameters Type Name Description System.Linq.IQueryable source A sequence of values to project. ParsingConfig config The ParsingConfig . System.String collectionSelector A projection function to apply to each element of the input sequence. System.String resultSelector A projection function to apply to each element of each intermediate sequence. Should only use x and y as parameter names. System.Object [] collectionSelectorArgs An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings. System.Object [] resultSelectorArgs An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings. Returns Type Description System.Linq.IQueryable An System.Linq.IQueryable whose elements are the result of invoking the one-to-many projection function collectionSelector on each element of source and then mapping each of those sequence elements and their corresponding source element to a result element. Examples // TODO | Improve this Doc View Source SelectMany(IQueryable, ParsingConfig, String, String, String, String, Object[], Object[]) Projects each element of a sequence to an System.Linq.IQueryable and invokes a result selector function on each element therein. The resulting values from each intermediate sequence are combined into a single, one-dimensional sequence and returned. Declaration public static IQueryable SelectMany(this IQueryable source, ParsingConfig config, string collectionSelector, string resultSelector, string collectionParameterName, string resultParameterName, object[] collectionSelectorArgs = null, params object[] resultSelectorArgs) Parameters Type Name Description System.Linq.IQueryable source A sequence of values to project. ParsingConfig config The ParsingConfig . System.String collectionSelector A projection function to apply to each element of the input sequence. System.String resultSelector A projection function to apply to each element of each intermediate sequence. System.String collectionParameterName The name from collectionParameter to use. Default is x. System.String resultParameterName The name from resultParameterName to use. Default is y. System.Object [] collectionSelectorArgs An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings. System.Object [] resultSelectorArgs An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings. Returns Type Description System.Linq.IQueryable An System.Linq.IQueryable whose elements are the result of invoking the one-to-many projection function collectionSelector on each element of source and then mapping each of those sequence elements and their corresponding source element to a result element. Examples // TODO | Improve this Doc View Source SelectMany(IQueryable, ParsingConfig, Type, String, Object[]) Projects each element of a sequence to an System.Linq.IQueryable and combines the resulting sequences into one sequence. Declaration public static IQueryable SelectMany(this IQueryable source, ParsingConfig config, Type resultType, string selector, params object[] args) Parameters Type Name Description System.Linq.IQueryable source A sequence of values to project. ParsingConfig config The ParsingConfig . System.Type resultType The result type. System.String selector A projection string expression to apply to each element. System.Object [] args An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings. Returns Type Description System.Linq.IQueryable An System.Linq.IQueryable whose elements are the result of invoking a one-to-many projection function on each element of the input sequence. Examples var permissions = users.SelectMany(typeof(Permission), \"Roles.SelectMany(Permissions)\"); | Improve this Doc View Source SelectMany(IQueryable, String, Object[]) Projects each element of a sequence to an System.Linq.IQueryable and combines the resulting sequences into one sequence. Declaration public static IQueryable SelectMany(this IQueryable source, string selector, params object[] args) Parameters Type Name Description System.Linq.IQueryable source System.String selector System.Object [] args Returns Type Description System.Linq.IQueryable An System.Linq.IQueryable whose elements are the result of invoking a one-to-many projection function on each element of the input sequence. | Improve this Doc View Source SelectMany(IQueryable, String, String, Object[], Object[]) Projects each element of a sequence to an System.Linq.IQueryable and invokes a result selector function on each element therein. The resulting values from each intermediate sequence are combined into a single, one-dimensional sequence and returned. Declaration public static IQueryable SelectMany(this IQueryable source, string collectionSelector, string resultSelector, object[] collectionSelectorArgs = null, params object[] resultSelectorArgs) Parameters Type Name Description System.Linq.IQueryable source System.String collectionSelector System.String resultSelector System.Object [] collectionSelectorArgs System.Object [] resultSelectorArgs Returns Type Description System.Linq.IQueryable An System.Linq.IQueryable whose elements are the result of invoking the one-to-many projection function collectionSelector on each element of source and then mapping each of those sequence elements and their corresponding source element to a result element. | Improve this Doc View Source SelectMany(IQueryable, String, String, String, String, Object[], Object[]) Projects each element of a sequence to an System.Linq.IQueryable and invokes a result selector function on each element therein. The resulting values from each intermediate sequence are combined into a single, one-dimensional sequence and returned. Declaration public static IQueryable SelectMany(this IQueryable source, string collectionSelector, string resultSelector, string collectionParameterName, string resultParameterName, object[] collectionSelectorArgs = null, params object[] resultSelectorArgs) Parameters Type Name Description System.Linq.IQueryable source System.String collectionSelector System.String resultSelector System.String collectionParameterName System.String resultParameterName System.Object [] collectionSelectorArgs System.Object [] resultSelectorArgs Returns Type Description System.Linq.IQueryable An System.Linq.IQueryable whose elements are the result of invoking the one-to-many projection function collectionSelector on each element of source and then mapping each of those sequence elements and their corresponding source element to a result element. | Improve this Doc View Source SelectMany(IQueryable, Type, String, Object[]) Projects each element of a sequence to an System.Linq.IQueryable and combines the resulting sequences into one sequence. Declaration public static IQueryable SelectMany(this IQueryable source, Type resultType, string selector, params object[] args) Parameters Type Name Description System.Linq.IQueryable source System.Type resultType System.String selector System.Object [] args Returns Type Description System.Linq.IQueryable An System.Linq.IQueryable whose elements are the result of invoking a one-to-many projection function on each element of the input sequence. | Improve this Doc View Source SelectMany<TResult>(IQueryable, ParsingConfig, String, Object[]) Projects each element of a sequence to an System.Linq.IQueryable<T> and combines the resulting sequences into one sequence. Declaration public static IQueryable<TResult> SelectMany<TResult>(this IQueryable source, ParsingConfig config, string selector, params object[] args) Parameters Type Name Description System.Linq.IQueryable source A sequence of values to project. ParsingConfig config The ParsingConfig . System.String selector A projection string expression to apply to each element. System.Object [] args An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings. Returns Type Description System.Linq.IQueryable <TResult> An System.Linq.IQueryable<T> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence. Type Parameters Name Description TResult The type of the result. Examples var permissions = users.SelectMany<Permission>(\"Roles.SelectMany(Permissions)\"); | Improve this Doc View Source SelectMany<TResult>(IQueryable, String, Object[]) Projects each element of a sequence to an System.Linq.IQueryable<T> and combines the resulting sequences into one sequence. Declaration public static IQueryable<TResult> SelectMany<TResult>(this IQueryable source, string selector, params object[] args) Parameters Type Name Description System.Linq.IQueryable source System.String selector System.Object [] args Returns Type Description System.Linq.IQueryable <TResult> An System.Linq.IQueryable<T> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence. Type Parameters Name Description TResult The type of the result. | Improve this Doc View Source Single(IQueryable) Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence. Declaration public static object Single(this IQueryable source) Parameters Type Name Description System.Linq.IQueryable source A System.Linq.IQueryable to return the single element of. Returns Type Description System.Object The single element of the input sequence. | Improve this Doc View Source Single(IQueryable, ParsingConfig, String, Object[]) Returns the only element of a sequence that satisfies a specified condition, and throws an exception if there is not exactly one element in the sequence. Declaration public static object Single(this IQueryable source, ParsingConfig config, string predicate, params object[] args) Parameters Type Name Description System.Linq.IQueryable source The System.Linq.IQueryable to return the last element of. ParsingConfig config The ParsingConfig . System.String predicate A function to test each element for a condition. System.Object [] args An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings. Returns Type Description System.Object The first element in source that passes the test in predicate. | Improve this Doc View Source Single(IQueryable, LambdaExpression) Returns the only element of a sequence that satisfies a specified condition, and throws an exception if there is not exactly one element in the sequence. Declaration public static object Single(this IQueryable source, LambdaExpression lambda) Parameters Type Name Description System.Linq.IQueryable source The System.Linq.IQueryable to return the last element of. System.Linq.Expressions.LambdaExpression lambda A cached Lambda Expression. Returns Type Description System.Object The first element in source that passes the test in predicate. | Improve this Doc View Source Single(IQueryable, String, Object[]) Returns the only element of a sequence that satisfies a specified condition, and throws an exception if there is not exactly one element in the sequence. Declaration public static object Single(this IQueryable source, string predicate, params object[] args) Parameters Type Name Description System.Linq.IQueryable source System.String predicate System.Object [] args Returns Type Description System.Object The first element in source that passes the test in predicate. | Improve this Doc View Source SingleOrDefault(IQueryable) Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence. Declaration public static object SingleOrDefault(this IQueryable source) Parameters Type Name Description System.Linq.IQueryable source A System.Linq.IQueryable to return the single element of. Returns Type Description System.Object The single element of the input sequence, or default if the sequence contains no elements. | Improve this Doc View Source SingleOrDefault(IQueryable, ParsingConfig, String, Object[]) Returns the only element of a sequence that satisfies a specified condition or a default value if the sequence is empty; and throws an exception if there is not exactly one element in the sequence. Declaration public static object SingleOrDefault(this IQueryable source, ParsingConfig config, string predicate, params object[] args) Parameters Type Name Description System.Linq.IQueryable source The System.Linq.IQueryable to return the last element of. ParsingConfig config The ParsingConfig . System.String predicate A function to test each element for a condition. System.Object [] args An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings. Returns Type Description System.Object The first element in source that passes the test in predicate. | Improve this Doc View Source SingleOrDefault(IQueryable, LambdaExpression) Returns the only element of a sequence that satisfies a specified condition or a default value if the sequence is empty; and throws an exception if there is not exactly one element in the sequence. Declaration public static object SingleOrDefault(this IQueryable source, LambdaExpression lambda) Parameters Type Name Description System.Linq.IQueryable source The System.Linq.IQueryable to return the last element of. System.Linq.Expressions.LambdaExpression lambda A cached Lambda Expression. Returns Type Description System.Object The first element in source that passes the test in predicate. | Improve this Doc View Source SingleOrDefault(IQueryable, String, Object[]) Returns the only element of a sequence that satisfies a specified condition or a default value if the sequence is empty; and throws an exception if there is not exactly one element in the sequence. Declaration public static object SingleOrDefault(this IQueryable source, string predicate, params object[] args) Parameters Type Name Description System.Linq.IQueryable source System.String predicate System.Object [] args Returns Type Description System.Object The first element in source that passes the test in predicate. | Improve this Doc View Source Skip(IQueryable, Int32) Bypasses a specified number of elements in a sequence and then returns the remaining elements. Declaration public static IQueryable Skip(this IQueryable source, int count) Parameters Type Name Description System.Linq.IQueryable source A System.Linq.IQueryable to return elements from. System.Int32 count The number of elements to skip before returning the remaining elements. Returns Type Description System.Linq.IQueryable A System.Linq.IQueryable that contains elements that occur after the specified index in the input sequence. | Improve this Doc View Source SkipWhile(IQueryable, ParsingConfig, String, Object[]) Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. Declaration public static IQueryable SkipWhile(this IQueryable source, ParsingConfig config, string predicate, params object[] args) Parameters Type Name Description System.Linq.IQueryable source A sequence to check for being empty. ParsingConfig config The ParsingConfig . System.String predicate A function to test each element for a condition. System.Object [] args An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings. Returns Type Description System.Linq.IQueryable An System.Linq.IQueryable that contains elements from source starting at the first element in the linear series that does not pass the test specified by predicate. Examples IQueryable queryable = employees.AsQueryable(); var result1 = queryable.SkipWhile(\"Income > 50\"); var result2 = queryable.SkipWhile(\"Income > @0\", 50); | Improve this Doc View Source SkipWhile(IQueryable, String, Object[]) Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. Declaration public static IQueryable SkipWhile(this IQueryable source, string predicate, params object[] args) Parameters Type Name Description System.Linq.IQueryable source System.String predicate System.Object [] args Returns Type Description System.Linq.IQueryable An System.Linq.IQueryable that contains elements from source starting at the first element in the linear series that does not pass the test specified by predicate. | Improve this Doc View Source Sum(IQueryable) Computes the sum of a sequence of numeric values. Declaration [PublicAPI] public static object Sum(this IQueryable source) Parameters Type Name Description System.Linq.IQueryable source A sequence of numeric values to calculate the sum of. Returns Type Description System.Object The sum of the values in the sequence. Examples IQueryable queryable = employees.AsQueryable(); var result1 = queryable.Sum(); var result2 = queryable.Select(\"Roles.Sum()\"); | Improve this Doc View Source Sum(IQueryable, ParsingConfig, String, Object[]) Computes the sum of a sequence of numeric values. Declaration [PublicAPI] public static object Sum(this IQueryable source, ParsingConfig config, string predicate, params object[] args) Parameters Type Name Description System.Linq.IQueryable source A sequence of numeric values to calculate the sum of. ParsingConfig config The ParsingConfig . System.String predicate A function to test each element for a condition. System.Object [] args An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings. Returns Type Description System.Object The sum of the values in the sequence. Examples IQueryable queryable = employees.AsQueryable(); var result = queryable.Sum(\"Income\"); | Improve this Doc View Source Sum(IQueryable, LambdaExpression) Computes the sum of a sequence of numeric values. Declaration [PublicAPI] public static object Sum(this IQueryable source, LambdaExpression lambda) Parameters Type Name Description System.Linq.IQueryable source A sequence of numeric values to calculate the sum of. System.Linq.Expressions.LambdaExpression lambda A Lambda Expression. Returns Type Description System.Object The sum of the values in the sequence. | Improve this Doc View Source Sum(IQueryable, String, Object[]) Computes the sum of a sequence of numeric values. Declaration [PublicAPI] public static object Sum(this IQueryable source, string predicate, params object[] args) Parameters Type Name Description System.Linq.IQueryable source System.String predicate System.Object [] args Returns Type Description System.Object The sum of the values in the sequence. | Improve this Doc View Source Take(IQueryable, Int32) Returns a specified number of contiguous elements from the start of a sequence. Declaration public static IQueryable Take(this IQueryable source, int count) Parameters Type Name Description System.Linq.IQueryable source The sequence to return elements from. System.Int32 count The number of elements to return. Returns Type Description System.Linq.IQueryable A System.Linq.IQueryable that contains the specified number of elements from the start of source. | Improve this Doc View Source TakeWhile(IQueryable, ParsingConfig, String, Object[]) Returns elements from a sequence as long as a specified condition is true. Declaration public static IQueryable TakeWhile(this IQueryable source, ParsingConfig config, string predicate, params object[] args) Parameters Type Name Description System.Linq.IQueryable source A sequence to check for being empty. ParsingConfig config The ParsingConfig . System.String predicate A function to test each element for a condition. System.Object [] args An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings. Returns Type Description System.Linq.IQueryable An System.Linq.IQueryable that contains elements from the input sequence occurring before the element at which the test specified by predicate no longer passes. Examples IQueryable queryable = employees.AsQueryable(); var result1 = queryable.TakeWhile(\"Income > 50\"); var result2 = queryable.TakeWhile(\"Income > @0\", 50); | Improve this Doc View Source TakeWhile(IQueryable, String, Object[]) Returns elements from a sequence as long as a specified condition is true. Declaration public static IQueryable TakeWhile(this IQueryable source, string predicate, params object[] args) Parameters Type Name Description System.Linq.IQueryable source System.String predicate System.Object [] args Returns Type Description System.Linq.IQueryable An System.Linq.IQueryable that contains elements from the input sequence occurring before the element at which the test specified by predicate no longer passes. | Improve this Doc View Source ThenBy(IOrderedQueryable, ParsingConfig, String, IComparer, Object[]) Performs a subsequent ordering of the elements in a sequence in ascending order according to a key. Declaration public static IOrderedQueryable ThenBy(this IOrderedQueryable source, ParsingConfig config, string ordering, IComparer comparer, params object[] args) Parameters Type Name Description System.Linq.IOrderedQueryable source A sequence of values to order. ParsingConfig config The ParsingConfig . System.String ordering An expression string to indicate values to order by. System.Collections.IComparer comparer The comparer to use. System.Object [] args An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings. Returns Type Description System.Linq.IOrderedQueryable A System.Linq.IQueryable whose elements are sorted according to the specified ordering . | Improve this Doc View Source ThenBy(IOrderedQueryable, ParsingConfig, String, Object[]) Performs a subsequent ordering of the elements in a sequence in ascending order according to a key. Declaration public static IOrderedQueryable ThenBy(this IOrderedQueryable source, ParsingConfig config, string ordering, params object[] args) Parameters Type Name Description System.Linq.IOrderedQueryable source A sequence of values to order. ParsingConfig config The ParsingConfig . System.String ordering An expression string to indicate values to order by. System.Object [] args An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings. Returns Type Description System.Linq.IOrderedQueryable A System.Linq.IQueryable whose elements are sorted according to the specified ordering . Examples var result = queryable.OrderBy(\"LastName\"); var resultSingle = result.OrderBy(\"NumberProperty\"); var resultSingleDescending = result.OrderBy(\"NumberProperty DESC\"); var resultMultiple = result.OrderBy(\"NumberProperty, StringProperty DESC\"); | Improve this Doc View Source ThenBy(IOrderedQueryable, String, IComparer, Object[]) Performs a subsequent ordering of the elements in a sequence in ascending order according to a key. Declaration public static IOrderedQueryable ThenBy(this IOrderedQueryable source, string ordering, IComparer comparer, params object[] args) Parameters Type Name Description System.Linq.IOrderedQueryable source System.String ordering System.Collections.IComparer comparer System.Object [] args Returns Type Description System.Linq.IOrderedQueryable A System.Linq.IQueryable whose elements are sorted according to the specified ordering . | Improve this Doc View Source ThenBy(IOrderedQueryable, String, Object[]) Performs a subsequent ordering of the elements in a sequence in ascending order according to a key. Declaration public static IOrderedQueryable ThenBy(this IOrderedQueryable source, string ordering, params object[] args) Parameters Type Name Description System.Linq.IOrderedQueryable source System.String ordering System.Object [] args Returns Type Description System.Linq.IOrderedQueryable A System.Linq.IQueryable whose elements are sorted according to the specified ordering . | Improve this Doc View Source ThenBy<TSource>(IOrderedQueryable<TSource>, ParsingConfig, String, IComparer, Object[]) Performs a subsequent ordering of the elements in a sequence in ascending order according to a key. Declaration public static IOrderedQueryable<TSource> ThenBy<TSource>(this IOrderedQueryable<TSource> source, ParsingConfig config, string ordering, IComparer comparer, params object[] args) Parameters Type Name Description System.Linq.IOrderedQueryable <TSource> source A sequence of values to order. ParsingConfig config The ParsingConfig . System.String ordering An expression string to indicate values to order by. System.Collections.IComparer comparer The comparer to use. System.Object [] args An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings. Returns Type Description System.Linq.IOrderedQueryable <TSource> A System.Linq.IOrderedQueryable<T> whose elements are sorted according to the specified ordering . Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source ThenBy<TSource>(IOrderedQueryable<TSource>, ParsingConfig, String, Object[]) Performs a subsequent ordering of the elements in a sequence in ascending order according to a key. Declaration public static IOrderedQueryable<TSource> ThenBy<TSource>(this IOrderedQueryable<TSource> source, ParsingConfig config, string ordering, params object[] args) Parameters Type Name Description System.Linq.IOrderedQueryable <TSource> source A sequence of values to order. ParsingConfig config The ParsingConfig . System.String ordering An expression string to indicate values to order by. System.Object [] args An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings. Returns Type Description System.Linq.IOrderedQueryable <TSource> A System.Linq.IOrderedQueryable<T> whose elements are sorted according to the specified ordering . Type Parameters Name Description TSource The type of the elements of source. Examples var result = queryable.OrderBy<User>(\"LastName\"); var resultSingle = result.ThenBy<User>(\"NumberProperty\"); var resultSingleDescending = result.ThenBy<User>(\"NumberProperty DESC\"); var resultMultiple = result.ThenBy<User>(\"NumberProperty, StringProperty\"); | Improve this Doc View Source ThenBy<TSource>(IOrderedQueryable<TSource>, String, IComparer, Object[]) Performs a subsequent ordering of the elements in a sequence in ascending order according to a key. Declaration public static IOrderedQueryable<TSource> ThenBy<TSource>(this IOrderedQueryable<TSource> source, string ordering, IComparer comparer, params object[] args) Parameters Type Name Description System.Linq.IOrderedQueryable <TSource> source A sequence of values to order. System.String ordering An expression string to indicate values to order by. System.Collections.IComparer comparer The comparer to use. System.Object [] args An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings. Returns Type Description System.Linq.IOrderedQueryable <TSource> A System.Linq.IOrderedQueryable<T> whose elements are sorted according to the specified ordering . Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source ThenBy<TSource>(IOrderedQueryable<TSource>, String, Object[]) Performs a subsequent ordering of the elements in a sequence in ascending order according to a key. Declaration public static IOrderedQueryable<TSource> ThenBy<TSource>(this IOrderedQueryable<TSource> source, string ordering, params object[] args) Parameters Type Name Description System.Linq.IOrderedQueryable <TSource> source System.String ordering System.Object [] args Returns Type Description System.Linq.IOrderedQueryable <TSource> A System.Linq.IOrderedQueryable<T> whose elements are sorted according to the specified ordering . Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source Where(IQueryable, ParsingConfig, String, Object[]) Filters a sequence of values based on a predicate. Declaration public static IQueryable Where(this IQueryable source, ParsingConfig config, string predicate, params object[] args) Parameters Type Name Description System.Linq.IQueryable source A System.Linq.IQueryable to filter. ParsingConfig config The ParsingConfig . System.String predicate An expression string to test each element for a condition. System.Object [] args An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings. Returns Type Description System.Linq.IQueryable A System.Linq.IQueryable that contains elements from the input sequence that satisfy the condition specified by predicate. Examples var result1 = queryable.Where(\"NumberProperty = 1\"); var result2 = queryable.Where(\"NumberProperty = @0\", 1); var result3 = queryable.Where(\"StringProperty = null\"); var result4 = queryable.Where(\"StringProperty = \\\"abc\\\"\"); var result5 = queryable.Where(\"StringProperty = @0\", \"abc\"); | Improve this Doc View Source Where(IQueryable, LambdaExpression) Filters a sequence of values based on a predicate. Declaration public static IQueryable Where(this IQueryable source, LambdaExpression lambda) Parameters Type Name Description System.Linq.IQueryable source A System.Linq.IQueryable to filter. System.Linq.Expressions.LambdaExpression lambda A cached Lambda Expression. Returns Type Description System.Linq.IQueryable A System.Linq.IQueryable that contains elements from the input sequence that satisfy the condition specified by LambdaExpression. | Improve this Doc View Source Where(IQueryable, String, Object[]) Filters a sequence of values based on a predicate. Declaration public static IQueryable Where(this IQueryable source, string predicate, params object[] args) Parameters Type Name Description System.Linq.IQueryable source System.String predicate System.Object [] args Returns Type Description System.Linq.IQueryable A System.Linq.IQueryable that contains elements from the input sequence that satisfy the condition specified by predicate. | Improve this Doc View Source Where<TSource>(IQueryable<TSource>, ParsingConfig, String, Object[]) Filters a sequence of values based on a predicate. Declaration public static IQueryable<TSource> Where<TSource>(this IQueryable<TSource> source, ParsingConfig config, string predicate, params object[] args) Parameters Type Name Description System.Linq.IQueryable <TSource> source A System.Linq.IQueryable<T> to filter. ParsingConfig config The ParsingConfig . System.String predicate An expression string to test each element for a condition. System.Object [] args An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings. Returns Type Description System.Linq.IQueryable <TSource> A System.Linq.IQueryable<T> that contains elements from the input sequence that satisfy the condition specified by predicate. Type Parameters Name Description TSource The type of the elements of source. Examples var result1 = queryable.Where(\"NumberProperty = 1\"); var result2 = queryable.Where(\"NumberProperty = @0\", 1); var result3 = queryable.Where(\"StringProperty = null\"); var result4 = queryable.Where(\"StringProperty = \\\"abc\\\"\"); var result5 = queryable.Where(\"StringProperty = @0\", \"abc\"); | Improve this Doc View Source Where<TSource>(IQueryable<TSource>, LambdaExpression) Filters a sequence of values based on a predicate. Declaration public static IQueryable<TSource> Where<TSource>(this IQueryable<TSource> source, LambdaExpression lambda) Parameters Type Name Description System.Linq.IQueryable <TSource> source System.Linq.Expressions.LambdaExpression lambda A cached Lambda Expression. Returns Type Description System.Linq.IQueryable <TSource> A System.Linq.IQueryable that contains elements from the input sequence that satisfy the condition specified by LambdaExpression. Type Parameters Name Description TSource | Improve this Doc View Source Where<TSource>(IQueryable<TSource>, String, Object[]) Filters a sequence of values based on a predicate. Declaration public static IQueryable<TSource> Where<TSource>(this IQueryable<TSource> source, string predicate, params object[] args) Parameters Type Name Description System.Linq.IQueryable <TSource> source System.String predicate System.Object [] args Returns Type Description System.Linq.IQueryable <TSource> A System.Linq.IQueryable<T> that contains elements from the input sequence that satisfy the condition specified by predicate. Type Parameters Name Description TSource The type of the elements of source."
  },
  "api/System.Linq.Dynamic.Core.Exceptions.html": {
    "href": "api/System.Linq.Dynamic.Core.Exceptions.html",
    "title": "Namespace System.Linq.Dynamic.Core.Exceptions",
    "keywords": "Namespace System.Linq.Dynamic.Core.Exceptions Classes ParseException Represents errors that occur while parsing dynamic linq string expressions."
  },
  "api/System.Linq.Dynamic.Core.Exceptions.ParseException.html": {
    "href": "api/System.Linq.Dynamic.Core.Exceptions.ParseException.html",
    "title": "Class ParseException",
    "keywords": "Class ParseException Represents errors that occur while parsing dynamic linq string expressions. Inheritance System.Object System.Exception ParseException Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Inherited Members System.Exception.GetBaseException() System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : System.Linq.Dynamic.Core.Exceptions Assembly : System.Linq.Dynamic.Core.dll Syntax [Serializable] public sealed class ParseException : Exception, ISerializable, _Exception Constructors | Improve this Doc View Source ParseException(String, Int32, Exception) Initializes a new instance of the ParseException class with a specified error message and position. Declaration public ParseException(string message, int position, Exception innerException = null) Parameters Type Name Description System.String message The message that describes the error. System.Int32 position The location in the parsed string that produced the ParseException System.Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. Properties | Improve this Doc View Source Position The location in the parsed string that produced the ParseException . Declaration public int Position { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) When overridden in a derived class, sets the System.Runtime.Serialization.SerializationInfo with information about the exception. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. Overrides System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) | Improve this Doc View Source ToString() Creates and returns a string representation of the current exception. Declaration public override string ToString() Returns Type Description System.String A string representation of the current exception. Overrides System.Exception.ToString() Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/System.Linq.Dynamic.Core.ExtensibilityPoint.html": {
    "href": "api/System.Linq.Dynamic.Core.ExtensibilityPoint.html",
    "title": "Class ExtensibilityPoint",
    "keywords": "Class ExtensibilityPoint Extensibility point: If you want to modify expanded queries before executing them set your own functionality to override empty QueryOptimizer Inheritance System.Object ExtensibilityPoint Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : System.Linq.Dynamic.Core Assembly : System.Linq.Dynamic.Core.dll Syntax public class ExtensibilityPoint Fields | Improve this Doc View Source QueryOptimizer Place to optimize your queries. Example: Add a reference to Nuget package Linq.Expression.Optimizer and in your program initializers set Extensibility.QueryOptimizer = ExpressionOptimizer.visit; Declaration public static Func<Expression, Expression> QueryOptimizer Field Value Type Description System.Func < System.Linq.Expressions.Expression , System.Linq.Expressions.Expression >"
  },
  "api/System.Linq.Dynamic.Core.GroupResult.html": {
    "href": "api/System.Linq.Dynamic.Core.GroupResult.html",
    "title": "Class GroupResult",
    "keywords": "Class GroupResult The result of a call to a DynamicQueryableExtensions .GroupByMany() overload. Inheritance System.Object GroupResult Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : System.Linq.Dynamic.Core Assembly : System.Linq.Dynamic.Core.dll Syntax public class GroupResult Properties | Improve this Doc View Source Count The number of resulting elements in the group. Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Items The resulting elements in the group. Declaration public IEnumerable Items { get; } Property Value Type Description System.Collections.IEnumerable | Improve this Doc View Source Key The key value of the group. Declaration public object Key { get; } Property Value Type Description System.Object | Improve this Doc View Source Subgroups The resulting subgroups in the group. Declaration public IEnumerable<GroupResult> Subgroups { get; } Property Value Type Description System.Collections.Generic.IEnumerable < GroupResult > Methods | Improve this Doc View Source ToString() Returns a System.String showing the key of the group and the number of items in the group. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Overrides System.Object.ToString()"
  },
  "api/System.Linq.Dynamic.Core.html": {
    "href": "api/System.Linq.Dynamic.Core.html",
    "title": "Namespace System.Linq.Dynamic.Core",
    "keywords": "Namespace System.Linq.Dynamic.Core Classes DefaultQueryableAnalyzer Default implementation. DynamicClass Provides a base class for dynamic objects for Net 3.5 DynamicClassFactory A factory to create dynamic classes, based on http://stackoverflow.com/questions/29413942/c-sharp-anonymous-object-with-properties-from-dictionary . DynamicEnumerableExtensions Define extensions on System.Collections.IEnumerable . DynamicExpressionParser Helper class to convert an expression into an LambdaExpression DynamicProperty DynamicProperty DynamicQueryableExtensions Provides a set of static (Shared in Visual Basic) methods for querying data structures that implement System.Linq.IQueryable . It allows dynamic string based querying. Very handy when, at compile time, you don't know the type of queries that will be generated, or when downstream components only return column names to sort and filter by. ExtensibilityPoint Extensibility point: If you want to modify expanded queries before executing them set your own functionality to override empty QueryOptimizer GroupResult The result of a call to a DynamicQueryableExtensions .GroupByMany() overload. PagedResult PagedResult PagedResult<TSource> PagedResult{TSource} ParsingConfig Configuration class for System.Linq.Dynamic.Core. Interfaces IAssemblyHelper IAssemblyHelper interface which is used to retrieve assemblies that have been loaded into the execution context of this application domain. IQueryableAnalyzer Interface for QueryableAnalyzer."
  },
  "api/System.Linq.Dynamic.Core.IAssemblyHelper.html": {
    "href": "api/System.Linq.Dynamic.Core.IAssemblyHelper.html",
    "title": "Interface IAssemblyHelper",
    "keywords": "Interface IAssemblyHelper IAssemblyHelper interface which is used to retrieve assemblies that have been loaded into the execution context of this application domain. Namespace : System.Linq.Dynamic.Core Assembly : System.Linq.Dynamic.Core.dll Syntax public interface IAssemblyHelper Methods | Improve this Doc View Source GetAssemblies() Gets the assemblies that have been loaded into the execution context of this application domain. Declaration Assembly[] GetAssemblies() Returns Type Description System.Reflection.Assembly [] An array of assemblies in this application domain."
  },
  "api/System.Linq.Dynamic.Core.IQueryableAnalyzer.html": {
    "href": "api/System.Linq.Dynamic.Core.IQueryableAnalyzer.html",
    "title": "Interface IQueryableAnalyzer",
    "keywords": "Interface IQueryableAnalyzer Interface for QueryableAnalyzer. Namespace : System.Linq.Dynamic.Core Assembly : System.Linq.Dynamic.Core.dll Syntax public interface IQueryableAnalyzer Methods | Improve this Doc View Source SupportsLinqToObjects(IQueryable, IQueryProvider) Determines whether the specified query (and provider) supports LinqToObjects. Declaration bool SupportsLinqToObjects(IQueryable query, IQueryProvider provider = null) Parameters Type Name Description System.Linq.IQueryable query The query to check. System.Linq.IQueryProvider provider The provider to check (can be null). Returns Type Description System.Boolean true/false"
  },
  "api/System.Linq.Dynamic.Core.PagedResult.html": {
    "href": "api/System.Linq.Dynamic.Core.PagedResult.html",
    "title": "Class PagedResult",
    "keywords": "Class PagedResult PagedResult Inheritance System.Object PagedResult PagedResult<TSource> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : System.Linq.Dynamic.Core Assembly : System.Linq.Dynamic.Core.dll Syntax public class PagedResult Properties | Improve this Doc View Source CurrentPage Gets or sets the current page. Declaration public int CurrentPage { get; set; } Property Value Type Description System.Int32 The current page. | Improve this Doc View Source PageCount Gets or sets the page count. Declaration public int PageCount { get; set; } Property Value Type Description System.Int32 The page count. | Improve this Doc View Source PageSize Gets or sets the size of the page. Declaration public int PageSize { get; set; } Property Value Type Description System.Int32 The size of the page. | Improve this Doc View Source Queryable Gets or sets the queryable. Declaration public IQueryable Queryable { get; set; } Property Value Type Description System.Linq.IQueryable The queryable. | Improve this Doc View Source RowCount Gets or sets the row count. Declaration public int RowCount { get; set; } Property Value Type Description System.Int32 The row count."
  },
  "api/System.Linq.Dynamic.Core.PagedResult-1.html": {
    "href": "api/System.Linq.Dynamic.Core.PagedResult-1.html",
    "title": "Class PagedResult<TSource>",
    "keywords": "Class PagedResult<TSource> PagedResult{TSource} Inheritance System.Object PagedResult PagedResult<TSource> Inherited Members PagedResult.CurrentPage PagedResult.PageCount PagedResult.PageSize PagedResult.RowCount System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : System.Linq.Dynamic.Core Assembly : System.Linq.Dynamic.Core.dll Syntax public class PagedResult<TSource> : PagedResult Type Parameters Name Description TSource The type of the source. Properties | Improve this Doc View Source Queryable Gets or sets the queryable. Declaration public IQueryable<TSource> Queryable { get; set; } Property Value Type Description System.Linq.IQueryable <TSource> The queryable."
  },
  "api/System.Linq.Dynamic.Core.Parser.ExpressionParser.html": {
    "href": "api/System.Linq.Dynamic.Core.Parser.ExpressionParser.html",
    "title": "Class ExpressionParser",
    "keywords": "Class ExpressionParser ExpressionParser Inheritance System.Object ExpressionParser Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : System.Linq.Dynamic.Core.Parser Assembly : System.Linq.Dynamic.Core.dll Syntax public class ExpressionParser Constructors | Improve this Doc View Source ExpressionParser(ParameterExpression[], String, Object[], ParsingConfig) Initializes a new instance of the ExpressionParser class. Declaration public ExpressionParser(ParameterExpression[] parameters, string expression, object[] values, ParsingConfig parsingConfig) Parameters Type Name Description System.Linq.Expressions.ParameterExpression [] parameters The parameters. System.String expression The expression. System.Object [] values The values. ParsingConfig parsingConfig The parsing configuration. Properties | Improve this Doc View Source ItName Gets name for the it field. By default this is set to the KeyWord value \"it\". Declaration public string ItName { get; } Property Value Type Description System.String | Improve this Doc View Source LastLambdaItName There was a problem when an expression contained multiple lambdas where the ItName was not cleared and freed for the next lambda. This variable stores the ItName of the last parsed lambda. Not used internally by ExpressionParser, but used to preserve compatibility of parsingConfig.RenameParameterExpression which was designed to only work with mono-lambda expressions. Declaration public string LastLambdaItName { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Parse(Type, Boolean) Uses the TextParser to parse the string into the specified result type. Declaration public Expression Parse(Type resultType, bool createParameterCtor = true) Parameters Type Name Description System.Type resultType Type of the result. System.Boolean createParameterCtor if set to true [create parameter ctor]. Returns Type Description System.Linq.Expressions.Expression Expression"
  },
  "api/System.Linq.Dynamic.Core.Parser.ExpressionPromoter.html": {
    "href": "api/System.Linq.Dynamic.Core.Parser.ExpressionPromoter.html",
    "title": "Class ExpressionPromoter",
    "keywords": "Class ExpressionPromoter ExpressionPromoter Inheritance System.Object ExpressionPromoter Implements IExpressionPromoter Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : System.Linq.Dynamic.Core.Parser Assembly : System.Linq.Dynamic.Core.dll Syntax public class ExpressionPromoter : IExpressionPromoter Constructors | Improve this Doc View Source ExpressionPromoter(ParsingConfig) Initializes a new instance of the ExpressionPromoter class. Declaration public ExpressionPromoter(ParsingConfig config) Parameters Type Name Description ParsingConfig config The ParsingConfig. Methods | Improve this Doc View Source Promote(Expression, Type, Boolean, Boolean) Promote an expression Declaration public virtual Expression Promote(Expression expr, Type type, bool exact, bool convertExpr) Parameters Type Name Description System.Linq.Expressions.Expression expr Source expression System.Type type Destination data type to promote System.Boolean exact If the match must be exact System.Boolean convertExpr Convert expression Returns Type Description System.Linq.Expressions.Expression The promoted System.Linq.Expressions.Expression or null. Implements IExpressionPromoter"
  },
  "api/System.Linq.Dynamic.Core.Parser.html": {
    "href": "api/System.Linq.Dynamic.Core.Parser.html",
    "title": "Namespace System.Linq.Dynamic.Core.Parser",
    "keywords": "Namespace System.Linq.Dynamic.Core.Parser Classes ExpressionParser ExpressionParser ExpressionPromoter ExpressionPromoter NumberParser NumberParser Interfaces IExpressionPromoter Expression promoter is used to promote object or value types to their destination type when an automatic promotion is available such as: int to int?"
  },
  "api/System.Linq.Dynamic.Core.Parser.IExpressionPromoter.html": {
    "href": "api/System.Linq.Dynamic.Core.Parser.IExpressionPromoter.html",
    "title": "Interface IExpressionPromoter",
    "keywords": "Interface IExpressionPromoter Expression promoter is used to promote object or value types to their destination type when an automatic promotion is available such as: int to int? Namespace : System.Linq.Dynamic.Core.Parser Assembly : System.Linq.Dynamic.Core.dll Syntax public interface IExpressionPromoter Methods | Improve this Doc View Source Promote(Expression, Type, Boolean, Boolean) Promote an expression Declaration Expression Promote(Expression expr, Type type, bool exact, bool convertExpr) Parameters Type Name Description System.Linq.Expressions.Expression expr Source expression System.Type type Destination data type to promote System.Boolean exact If the match must be exact System.Boolean convertExpr Convert expression Returns Type Description System.Linq.Expressions.Expression The promoted System.Linq.Expressions.Expression or null."
  },
  "api/System.Linq.Dynamic.Core.Parser.NumberParser.html": {
    "href": "api/System.Linq.Dynamic.Core.Parser.NumberParser.html",
    "title": "Class NumberParser",
    "keywords": "Class NumberParser NumberParser Inheritance System.Object NumberParser Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : System.Linq.Dynamic.Core.Parser Assembly : System.Linq.Dynamic.Core.dll Syntax public class NumberParser Constructors | Improve this Doc View Source NumberParser(ParsingConfig) Initializes a new instance of the NumberParser class. Declaration public NumberParser(ParsingConfig config) Parameters Type Name Description ParsingConfig config The ParsingConfig. Methods | Improve this Doc View Source ParseIntegerLiteral(Int32, String) Tries to parse the text into a IntegerLiteral ConstantExpression. Declaration public Expression ParseIntegerLiteral(int tokenPosition, string text) Parameters Type Name Description System.Int32 tokenPosition The current token position (needed for error reporting). System.String text The text. Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source ParseNumber(String, Type) Parses the number (text) into the specified type. Declaration public object ParseNumber(string text, Type type) Parameters Type Name Description System.String text The text. System.Type type The type. Returns Type Description System.Object | Improve this Doc View Source ParseRealLiteral(String, Char, Boolean) Parse the text into a Real ConstantExpression. Declaration public Expression ParseRealLiteral(string text, char qualifier, bool stripQualifier) Parameters Type Name Description System.String text System.Char qualifier System.Boolean stripQualifier Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source TryParseNumber(String, Type, out Object) Tries to parse the number (text) into the specified type. Declaration public bool TryParseNumber(string text, Type type, out object result) Parameters Type Name Description System.String text The text. System.Type type The type. System.Object result The result. Returns Type Description System.Boolean"
  },
  "api/System.Linq.Dynamic.Core.ParsingConfig.html": {
    "href": "api/System.Linq.Dynamic.Core.ParsingConfig.html",
    "title": "Class ParsingConfig",
    "keywords": "Class ParsingConfig Configuration class for System.Linq.Dynamic.Core. Inheritance System.Object ParsingConfig Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : System.Linq.Dynamic.Core Assembly : System.Linq.Dynamic.Core.dll Syntax public class ParsingConfig Properties | Improve this Doc View Source AllowNewToEvaluateAnyType Allows the New() keyword to evaluate any available Type. Default value is false . Declaration public bool AllowNewToEvaluateAnyType { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source AreContextKeywordsEnabled Determines if the context keywords (it, parent, and root) are valid and usable inside a Dynamic Linq string expression. Does not affect the usability of the equivalent context symbols ($, ^ and ~). Default value is false . Declaration public bool AreContextKeywordsEnabled { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ConstantExpressionCacheConfig Caches constant expressions to enhance performance. Periodic cleanup is performed to manage cache size, governed by this configuration. Declaration public CacheConfig ConstantExpressionCacheConfig { get; set; } Property Value Type Description CacheConfig | Improve this Doc View Source ConvertObjectToSupportComparison Converts typeof(object) to the correct type to allow comparison (Equal, NotEqual, GreaterThan, GreaterThanEqual, LessThan and LessThanEqual). Default value is false . When set to true , the following code will work correct: class Person { public string Name { get; set; } public object Age { get; set; } } var persons = new[] { new Person { Name = \"Foo\", Age = 99 }, new Person { Name = \"Bar\", Age = 33 } }.AsQueryable(); var config = new ParsingConfig { ConvertObjectToSupportComparison = true }; var results = persons.Where(config, \"Age > 50\").ToList(); Declaration public bool ConvertObjectToSupportComparison { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source CustomTypeProvider Gets or sets the IDynamicLinkCustomTypeProvider . Declaration public IDynamicLinkCustomTypeProvider CustomTypeProvider { get; set; } Property Value Type Description IDynamicLinkCustomTypeProvider | Improve this Doc View Source DateTimeIsParsedAsUTC By default, a DateTime (like 'Fri, 10 May 2019 11:03:17 GMT') is parsed as local time. Use this flag to parse all DateTime strings as UTC. Default value is false . Declaration public bool DateTimeIsParsedAsUTC { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Default Default ParsingConfig Declaration public static ParsingConfig Default { get; } Property Value Type Description ParsingConfig | Improve this Doc View Source DefaultCosmosDb Default ParsingConfig for CosmosDb Declaration public static ParsingConfig DefaultCosmosDb { get; } Property Value Type Description ParsingConfig | Improve this Doc View Source DefaultEFCore21 Default ParsingConfig for EntityFramework Core 2.1 and higher Declaration public static ParsingConfig DefaultEFCore21 { get; } Property Value Type Description ParsingConfig | Improve this Doc View Source DisableMemberAccessToIndexAccessorFallback By default, when a member is not found in a type and the type has a string based index accessor it will be parsed as an index accessor. Use this flag to disable this behaviour and have parsing fail when parsing an expression where a member access on a non-existing member happens. Default value is false . Declaration public bool DisableMemberAccessToIndexAccessorFallback { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source DisallowNewKeyword Disallows the New() keyword to be used to construct a class. Default value is false . Declaration public bool DisallowNewKeyword { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source EvaluateGroupByAtDatabase Gets or sets a value indicating whether the EntityFramework version supports evaluating GroupBy at database level. See https://docs.microsoft.com/en-us/ef/core/what-is-new/ef-core-2.1#linq-groupby-translation Remark: when this setting is set to true , make sure to supply this ParsingConfig as first parameter on the extension methods. Default value is false . Declaration public bool EvaluateGroupByAtDatabase { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ExpressionPromoter Gets or sets the IExpressionPromoter . Declaration public IExpressionPromoter ExpressionPromoter { get; set; } Property Value Type Description IExpressionPromoter | Improve this Doc View Source IsCaseSensitive Gets or sets if parameter, method, and properties resolution should be case-sensitive or not. Default value is false . Declaration public bool IsCaseSensitive { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source LoadAdditionalAssembliesFromCurrentDomainBaseDirectory Load additional assemblies from the current domain base directory. Note: only used when full .NET Framework and .NET Core App 2.x and higher. Default value is false . Declaration public bool LoadAdditionalAssembliesFromCurrentDomainBaseDirectory { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source NullPropagatingUseDefaultValueForNonNullableValueTypes When using the NullPropagating function np(...), use a \"default value\" for non-nullable value types instead of \"null value\". Default value is false . Declaration public bool NullPropagatingUseDefaultValueForNonNullableValueTypes { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source NumberParseCulture The number parsing culture. Default value is CultureInfo.InvariantCulture Declaration public CultureInfo NumberParseCulture { get; set; } Property Value Type Description System.Globalization.CultureInfo | Improve this Doc View Source PrioritizePropertyOrFieldOverTheType When the type and property have the same name the parser takes the property instead of type when this setting is set to true . This setting is also used for calling ExtensionMethods. Default value is true . Declaration public bool PrioritizePropertyOrFieldOverTheType { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source QueryableAnalyzer Gets or sets the IQueryableAnalyzer . Declaration public IQueryableAnalyzer QueryableAnalyzer { get; set; } Property Value Type Description IQueryableAnalyzer | Improve this Doc View Source RenameEmptyParameterExpressionNames Prevents any System.Linq.Expressions.ParameterExpression.Name value from being empty by substituting a random 16 character word. Default value is false . Declaration public bool RenameEmptyParameterExpressionNames { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source RenameParameterExpression Renames the (Typed)ParameterExpression empty Name to the correct supplied name from it . Default value is false . Declaration public bool RenameParameterExpression { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ResolveTypesBySimpleName By default, finding types by a simple name is not supported. Use this flag to use the CustomTypeProvider to resolve types by a simple name like \"Employee\" instead of \"MyDatabase.Entities.Employee\". Note that a first matching type is returned and this functionality needs to scan all types from all assemblies, so use with caution. Default value is false . Declaration public bool ResolveTypesBySimpleName { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source StringLiteralParsing Defines the type of string literal parsing that will be performed. Default value is StringLiteralParsingType.Default . Declaration public StringLiteralParsingType StringLiteralParsing { get; set; } Property Value Type Description StringLiteralParsingType | Improve this Doc View Source SupportCastingToFullyQualifiedTypeAsString Support casting to a full qualified type using a string (double-quoted value). var result = queryable.Select($\"\\\"System.DateTime\\\"(LastUpdate)\"); Default value is true . Declaration public bool SupportCastingToFullyQualifiedTypeAsString { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source SupportDotInPropertyNames Support a \".\" in a property-name. Used in the 'new (a.b as a.b)' syntax. Default value is false . Declaration public bool SupportDotInPropertyNames { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source SupportEnumerationsFromSystemNamespace Support enumeration-types from the System namespace in mscorlib. An example could be \"StringComparison\". Default value is true . Declaration public bool SupportEnumerationsFromSystemNamespace { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source TypeConverters Additional TypeConverters Declaration public IDictionary<Type, TypeConverter> TypeConverters { get; set; } Property Value Type Description System.Collections.Generic.IDictionary < System.Type , System.ComponentModel.TypeConverter > | Improve this Doc View Source UseParameterizedNamesInDynamicQuery Use Parameterized Names in generated dynamic SQL query. See https://github.com/graeme-hill/gblog/blob/master/source_content/articles/2014.139_entity-framework-dynamic-queries-and-parameterization.mkd Default value is false . Declaration public bool UseParameterizedNamesInDynamicQuery { get; set; } Property Value Type Description System.Boolean"
  },
  "api/System.Linq.Dynamic.Core.Tokenizer.html": {
    "href": "api/System.Linq.Dynamic.Core.Tokenizer.html",
    "title": "Namespace System.Linq.Dynamic.Core.Tokenizer",
    "keywords": "Namespace System.Linq.Dynamic.Core.Tokenizer Classes TextParser TextParser which can be used to parse a text into tokens. Structs Token Token Enums TokenId TokenId which defines the text which is parsed."
  },
  "api/System.Linq.Dynamic.Core.Tokenizer.TextParser.html": {
    "href": "api/System.Linq.Dynamic.Core.Tokenizer.TextParser.html",
    "title": "Class TextParser",
    "keywords": "Class TextParser TextParser which can be used to parse a text into tokens. Inheritance System.Object TextParser Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : System.Linq.Dynamic.Core.Tokenizer Assembly : System.Linq.Dynamic.Core.dll Syntax public class TextParser Constructors | Improve this Doc View Source TextParser(ParsingConfig, String) Constructor for TextParser Declaration public TextParser(ParsingConfig config, string text) Parameters Type Name Description ParsingConfig config System.String text Fields | Improve this Doc View Source CurrentToken The current parsed Token . Declaration public Token CurrentToken Field Value Type Description Token Methods | Improve this Doc View Source Clone() This method is used to clone the current TextParser . Declaration public TextParser Clone() Returns Type Description TextParser Cloned TextParser | Improve this Doc View Source NextToken() Go to the next token. Declaration public void NextToken() | Improve this Doc View Source PeekNextChar() Peek the next character. Declaration public char PeekNextChar() Returns Type Description System.Char The next character, or \\0 if end of string. | Improve this Doc View Source ValidateToken(TokenId, String) Check if the current token is the specified TokenId . Declaration public void ValidateToken(TokenId tokenId, string errorMessage = null) Parameters Type Name Description TokenId tokenId The tokenId to check. System.String errorMessage The (optional) error message."
  },
  "api/System.Linq.Dynamic.Core.Tokenizer.Token.html": {
    "href": "api/System.Linq.Dynamic.Core.Tokenizer.Token.html",
    "title": "Struct Token",
    "keywords": "Struct Token Token Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : System.Linq.Dynamic.Core.Tokenizer Assembly : System.Linq.Dynamic.Core.dll Syntax public struct Token Properties | Improve this Doc View Source Id The TokenId. Declaration public TokenId Id { readonly get; set; } Property Value Type Description TokenId | Improve this Doc View Source OriginalId The Original TokenId. Declaration public TokenId OriginalId { readonly get; set; } Property Value Type Description TokenId | Improve this Doc View Source Pos The position. Declaration public int Pos { readonly get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Text The text. Declaration public string Text { readonly get; set; } Property Value Type Description System.String"
  },
  "api/System.Linq.Dynamic.Core.Tokenizer.TokenId.html": {
    "href": "api/System.Linq.Dynamic.Core.Tokenizer.TokenId.html",
    "title": "Enum TokenId",
    "keywords": "Enum TokenId TokenId which defines the text which is parsed. Namespace : System.Linq.Dynamic.Core.Tokenizer Assembly : System.Linq.Dynamic.Core.dll Syntax public enum TokenId Fields Name Description Ampersand Asterisk Bar CloseBracket CloseCurlyParen CloseParen Colon Comma Dot DoubleAmpersand DoubleBar DoubleEqual DoubleGreaterThan DoubleLessThan End Equal Exclamation ExclamationEqual GreaterThan GreaterThanEqual Identifier IntegerLiteral Lambda LessGreater LessThan LessThanEqual Minus NullCoalescing NullPropagation OpenBracket OpenCurlyParen OpenParen Percent Plus Question RealLiteral Slash StringLiteral Unknown"
  },
  "api/System.Linq.Dynamic.Core.Util.Cache.CacheConfig.html": {
    "href": "api/System.Linq.Dynamic.Core.Util.Cache.CacheConfig.html",
    "title": "Class CacheConfig",
    "keywords": "Class CacheConfig Cache Configuration Options Inheritance System.Object CacheConfig Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : System.Linq.Dynamic.Core.Util.Cache Assembly : System.Linq.Dynamic.Core.dll Syntax public class CacheConfig Properties | Improve this Doc View Source CleanupFrequency Sets the frequency for running the cleanup process in the Constant Expression cache. By default, cleanup occurs every 10 minutes. Declaration public TimeSpan CleanupFrequency { get; set; } Property Value Type Description System.TimeSpan | Improve this Doc View Source MinItemsTrigger Configures the minimum number of items required in the constant expression cache before triggering cleanup. This prevents frequent cleanups, especially in caches with few items. A default value of null implies that cleanup is always allowed to run, helping in timely removal of unused cache items. Declaration public int? MinItemsTrigger { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source ReturnExpiredItems Enables returning expired cache items in scenarios where cleanup, running on a separate thread, has not yet removed them. This allows for the retrieval of an expired object without needing to clear and recreate it if a request is made concurrently with cleanup. Particularly useful when cached items are deterministic, ensuring consistent results even from expired entries. Default true; Declaration public bool ReturnExpiredItems { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source TimeToLive Sets a Time-To-Live (TTL) for items in the constant expression cache to prevent uncontrolled growth. Items not accessed within this TTL will be expired, allowing garbage collection to reclaim the memory. Default is 10 minutes. Declaration public TimeSpan TimeToLive { get; set; } Property Value Type Description System.TimeSpan"
  },
  "api/System.Linq.Dynamic.Core.Util.Cache.html": {
    "href": "api/System.Linq.Dynamic.Core.Util.Cache.html",
    "title": "Namespace System.Linq.Dynamic.Core.Util.Cache",
    "keywords": "Namespace System.Linq.Dynamic.Core.Util.Cache Classes CacheConfig Cache Configuration Options"
  },
  "api/System.Tuple-2.html": {
    "href": "api/System.Tuple-2.html",
    "title": "Class Tuple<T1, T2>",
    "keywords": "Class Tuple<T1, T2> Represents a 2-tuple, or pair. Inheritance System.Object Tuple<T1, T2> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : System Assembly : System.Linq.Dynamic.Core.dll Syntax public class Tuple<T1, T2> Type Parameters Name Description T1 The type of the tuple's first component. T2 The type of the tuple's second component. Properties | Improve this Doc View Source Item1 The value of the current System.Tuple`2 object's first component. Declaration public T1 Item1 { get; } Property Value Type Description T1 | Improve this Doc View Source Item2 The value of the current System.Tuple`2 object's second component. Declaration public T2 Item2 { get; } Property Value Type Description T2"
  },
  "index.html": {
    "href": "index.html",
    "title": "System.Linq.Dynamic.Core",
    "keywords": "System.Linq.Dynamic.Core This is a .NET Core / Standard port of the Microsoft assembly for the .Net 4.0 Dynamic language functionality. Overview With this library it's possible to write Dynamic LINQ queries (string based) on an IQueryable : var query = db.Customers .Where(\"City == @0 and Orders.Count >= @1\", \"London\", 10) .OrderBy(\"CompanyName\") .Select(\"new(CompanyName as Name, Phone)\"); API Documentation See this link ."
  }
}